// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Mqtt.Server.Identity.PostgreSQL.Compiled
{
    [EntityFrameworkInternal]
    public partial class IdentityRoleEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Microsoft.AspNetCore.Identity.IdentityRole",
                typeof(IdentityRole),
                baseEntityType,
                propertyCount: 4,
                unnamedIndexCount: 1,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(string),
                propertyInfo: typeof(IdentityRole<string>).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentityRole<string>).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw);
            id.SetGetter(
                string (IdentityRole entity) => IdentityRoleUnsafeAccessors<string>.Id(entity),
                bool (IdentityRole entity) => IdentityRoleUnsafeAccessors<string>.Id(entity) == null,
                string (IdentityRole instance) => IdentityRoleUnsafeAccessors<string>.Id(instance),
                bool (IdentityRole instance) => IdentityRoleUnsafeAccessors<string>.Id(instance) == null);
            id.SetSetter(
                (IdentityRole entity, string value) => IdentityRoleUnsafeAccessors<string>.Id(entity) = value);
            id.SetMaterializationSetter(
                (IdentityRole entity, string value) => IdentityRoleUnsafeAccessors<string>.Id(entity) = value);
            id.SetAccessors(
                string (InternalEntityEntry entry) => IdentityRoleUnsafeAccessors<string>.Id(((IdentityRole)(entry.Entity))),
                string (InternalEntityEntry entry) => IdentityRoleUnsafeAccessors<string>.Id(((IdentityRole)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(id, 0),
                string (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<string>(id, 0),
                object (ValueBuffer valueBuffer) => valueBuffer[0]);
            id.SetPropertyIndexes(
                index: 0,
                originalValueIndex: 0,
                shadowIndex: -1,
                relationshipIndex: 0,
                storeGenerationIndex: -1);
            id.TypeMapping = StringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                keyComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    dbType: System.Data.DbType.String));
            id.SetCurrentValueComparer(new EntryCurrentValueComparer<string>(id));
            id.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
            id.AddAnnotation("Relational:ColumnName", "id");

            var concurrencyStamp = runtimeEntityType.AddProperty(
                "ConcurrencyStamp",
                typeof(string),
                propertyInfo: typeof(IdentityRole<string>).GetProperty("ConcurrencyStamp", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentityRole<string>).GetField("<ConcurrencyStamp>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                concurrencyToken: true);
            concurrencyStamp.SetGetter(
                string (IdentityRole entity) => IdentityRoleUnsafeAccessors<string>.ConcurrencyStamp(entity),
                bool (IdentityRole entity) => IdentityRoleUnsafeAccessors<string>.ConcurrencyStamp(entity) == null,
                string (IdentityRole instance) => IdentityRoleUnsafeAccessors<string>.ConcurrencyStamp(instance),
                bool (IdentityRole instance) => IdentityRoleUnsafeAccessors<string>.ConcurrencyStamp(instance) == null);
            concurrencyStamp.SetSetter(
                (IdentityRole entity, string value) => IdentityRoleUnsafeAccessors<string>.ConcurrencyStamp(entity) = value);
            concurrencyStamp.SetMaterializationSetter(
                (IdentityRole entity, string value) => IdentityRoleUnsafeAccessors<string>.ConcurrencyStamp(entity) = value);
            concurrencyStamp.SetAccessors(
                string (InternalEntityEntry entry) => IdentityRoleUnsafeAccessors<string>.ConcurrencyStamp(((IdentityRole)(entry.Entity))),
                string (InternalEntityEntry entry) => IdentityRoleUnsafeAccessors<string>.ConcurrencyStamp(((IdentityRole)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(concurrencyStamp, 1),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(concurrencyStamp),
                object (ValueBuffer valueBuffer) => valueBuffer[1]);
            concurrencyStamp.SetPropertyIndexes(
                index: 1,
                originalValueIndex: 1,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            concurrencyStamp.TypeMapping = StringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                keyComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    dbType: System.Data.DbType.String));
            concurrencyStamp.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
            concurrencyStamp.AddAnnotation("Relational:ColumnName", "concurrency_stamp");

            var name = runtimeEntityType.AddProperty(
                "Name",
                typeof(string),
                propertyInfo: typeof(IdentityRole<string>).GetProperty("Name", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentityRole<string>).GetField("<Name>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 256);
            name.SetGetter(
                string (IdentityRole entity) => IdentityRoleUnsafeAccessors<string>.Name(entity),
                bool (IdentityRole entity) => IdentityRoleUnsafeAccessors<string>.Name(entity) == null,
                string (IdentityRole instance) => IdentityRoleUnsafeAccessors<string>.Name(instance),
                bool (IdentityRole instance) => IdentityRoleUnsafeAccessors<string>.Name(instance) == null);
            name.SetSetter(
                (IdentityRole entity, string value) => IdentityRoleUnsafeAccessors<string>.Name(entity) = value);
            name.SetMaterializationSetter(
                (IdentityRole entity, string value) => IdentityRoleUnsafeAccessors<string>.Name(entity) = value);
            name.SetAccessors(
                string (InternalEntityEntry entry) => IdentityRoleUnsafeAccessors<string>.Name(((IdentityRole)(entry.Entity))),
                string (InternalEntityEntry entry) => IdentityRoleUnsafeAccessors<string>.Name(((IdentityRole)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(name, 2),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(name),
                object (ValueBuffer valueBuffer) => valueBuffer[2]);
            name.SetPropertyIndexes(
                index: 2,
                originalValueIndex: 2,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            name.TypeMapping = NpgsqlStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                keyComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "character varying(256)",
                    size: 256));
            name.TypeMapping = ((NpgsqlStringTypeMapping)name.TypeMapping).Clone(npgsqlDbType: NpgsqlTypes.NpgsqlDbType.Varchar);
            name.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
            name.AddAnnotation("Relational:ColumnName", "name");

            var normalizedName = runtimeEntityType.AddProperty(
                "NormalizedName",
                typeof(string),
                propertyInfo: typeof(IdentityRole<string>).GetProperty("NormalizedName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentityRole<string>).GetField("<NormalizedName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 256);
            normalizedName.SetGetter(
                string (IdentityRole entity) => IdentityRoleUnsafeAccessors<string>.NormalizedName(entity),
                bool (IdentityRole entity) => IdentityRoleUnsafeAccessors<string>.NormalizedName(entity) == null,
                string (IdentityRole instance) => IdentityRoleUnsafeAccessors<string>.NormalizedName(instance),
                bool (IdentityRole instance) => IdentityRoleUnsafeAccessors<string>.NormalizedName(instance) == null);
            normalizedName.SetSetter(
                (IdentityRole entity, string value) => IdentityRoleUnsafeAccessors<string>.NormalizedName(entity) = value);
            normalizedName.SetMaterializationSetter(
                (IdentityRole entity, string value) => IdentityRoleUnsafeAccessors<string>.NormalizedName(entity) = value);
            normalizedName.SetAccessors(
                string (InternalEntityEntry entry) => IdentityRoleUnsafeAccessors<string>.NormalizedName(((IdentityRole)(entry.Entity))),
                string (InternalEntityEntry entry) => IdentityRoleUnsafeAccessors<string>.NormalizedName(((IdentityRole)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(normalizedName, 3),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(normalizedName),
                object (ValueBuffer valueBuffer) => valueBuffer[3]);
            normalizedName.SetPropertyIndexes(
                index: 3,
                originalValueIndex: 3,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            normalizedName.TypeMapping = NpgsqlStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                keyComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "character varying(256)",
                    size: 256));
            normalizedName.TypeMapping = ((NpgsqlStringTypeMapping)normalizedName.TypeMapping).Clone(npgsqlDbType: NpgsqlTypes.NpgsqlDbType.Varchar);
            normalizedName.SetCurrentValueComparer(new EntryCurrentValueComparer<string>(normalizedName));
            normalizedName.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
            normalizedName.AddAnnotation("Relational:ColumnName", "normalized_name");

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "pk_identity_role");

            var index = runtimeEntityType.AddIndex(
                new[] { normalizedName },
                unique: true);
            index.AddAnnotation("Relational:Name", "role_name_index");

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            var id = runtimeEntityType.FindProperty("Id");
            var concurrencyStamp = runtimeEntityType.FindProperty("ConcurrencyStamp");
            var name = runtimeEntityType.FindProperty("Name");
            var normalizedName = runtimeEntityType.FindProperty("NormalizedName");
            var key = runtimeEntityType.FindKey(new[] { id });
            key.SetPrincipalKeyValueFactory(KeyValueFactoryFactory.CreateSimpleNullableFactory<string, int>(key));
            key.SetIdentityMapFactory(IdentityMapFactoryFactory.CreateFactory<string>(key));
            runtimeEntityType.SetOriginalValuesFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((IdentityRole)(source.Entity));
                    return ((ISnapshot)(new Snapshot<string, string, string, string>((source.GetCurrentValue<string>(id) == null ? null : ((ValueComparer<string>)(((IProperty)id).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(id))), (source.GetCurrentValue<string>(concurrencyStamp) == null ? null : ((ValueComparer<string>)(((IProperty)concurrencyStamp).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(concurrencyStamp))), (source.GetCurrentValue<string>(name) == null ? null : ((ValueComparer<string>)(((IProperty)name).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(name))), (source.GetCurrentValue<string>(normalizedName) == null ? null : ((ValueComparer<string>)(((IProperty)normalizedName).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(normalizedName))))));
                });
            runtimeEntityType.SetStoreGeneratedValuesFactory(
                ISnapshot () => Snapshot.Empty);
            runtimeEntityType.SetTemporaryValuesFactory(
                ISnapshot (InternalEntityEntry source) => Snapshot.Empty);
            runtimeEntityType.SetShadowValuesFactory(
                ISnapshot (IDictionary<string, object> source) => Snapshot.Empty);
            runtimeEntityType.SetEmptyShadowValuesFactory(
                ISnapshot () => Snapshot.Empty);
            runtimeEntityType.SetRelationshipSnapshotFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((IdentityRole)(source.Entity));
                    return ((ISnapshot)(new Snapshot<string>((source.GetCurrentValue<string>(id) == null ? null : ((ValueComparer<string>)(((IProperty)id).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<string>(id))))));
                });
            runtimeEntityType.Counts = new PropertyCounts(
                propertyCount: 4,
                navigationCount: 0,
                complexPropertyCount: 0,
                originalValueCount: 4,
                shadowCount: 0,
                relationshipCount: 1,
                storeGeneratedCount: 0);
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "asp_net_roles");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}