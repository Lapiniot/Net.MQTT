// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Update.Internal;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Mqtt.Server.Identity.PostgreSQL.Compiled
{
    public partial class ApplicationDbContextModel
    {
        private ApplicationDbContextModel()
            : base(skipDetectChanges: false, modelId: new Guid("ff6c45bc-e88c-4493-88ae-9b943b181d68"), entityTypeCount: 7)
        {
        }

        partial void Initialize()
        {
            var identityRole = IdentityRoleEntityType.Create(this);
            var identityRoleClaim = IdentityRoleClaimEntityType.Create(this);
            var identityUserClaim = IdentityUserClaimEntityType.Create(this);
            var identityUserLogin = IdentityUserLoginEntityType.Create(this);
            var identityUserRole = IdentityUserRoleEntityType.Create(this);
            var identityUserToken = IdentityUserTokenEntityType.Create(this);
            var applicationUser = ApplicationUserEntityType.Create(this);

            IdentityRoleClaimEntityType.CreateForeignKey1(identityRoleClaim, identityRole);
            IdentityUserClaimEntityType.CreateForeignKey1(identityUserClaim, applicationUser);
            IdentityUserLoginEntityType.CreateForeignKey1(identityUserLogin, applicationUser);
            IdentityUserRoleEntityType.CreateForeignKey1(identityUserRole, identityRole);
            IdentityUserRoleEntityType.CreateForeignKey2(identityUserRole, applicationUser);
            IdentityUserTokenEntityType.CreateForeignKey1(identityUserToken, applicationUser);

            IdentityRoleEntityType.CreateAnnotations(identityRole);
            IdentityRoleClaimEntityType.CreateAnnotations(identityRoleClaim);
            IdentityUserClaimEntityType.CreateAnnotations(identityUserClaim);
            IdentityUserLoginEntityType.CreateAnnotations(identityUserLogin);
            IdentityUserRoleEntityType.CreateAnnotations(identityUserRole);
            IdentityUserTokenEntityType.CreateAnnotations(identityUserToken);
            ApplicationUserEntityType.CreateAnnotations(applicationUser);

            AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            AddAnnotation("ProductVersion", "9.0.9");
            AddAnnotation("Relational:MaxIdentifierLength", 63);
            AddRuntimeAnnotation("Relational:RelationalModelFactory", () => CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var identityRole = FindEntityType("Microsoft.AspNetCore.Identity.IdentityRole")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            identityRole.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var microsoftAspNetCoreIdentityIdentityRoleTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityRole", null, relationalModel);
            var concurrency_stampColumnBase = new ColumnBase<ColumnMappingBase>("concurrency_stamp", "text", microsoftAspNetCoreIdentityIdentityRoleTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleTableBase.Columns.Add("concurrency_stamp", concurrency_stampColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("id", "text", microsoftAspNetCoreIdentityIdentityRoleTableBase);
            microsoftAspNetCoreIdentityIdentityRoleTableBase.Columns.Add("id", idColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("name", "character varying(256)", microsoftAspNetCoreIdentityIdentityRoleTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleTableBase.Columns.Add("name", nameColumnBase);
            var normalized_nameColumnBase = new ColumnBase<ColumnMappingBase>("normalized_name", "character varying(256)", microsoftAspNetCoreIdentityIdentityRoleTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleTableBase.Columns.Add("normalized_name", normalized_nameColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityRole", microsoftAspNetCoreIdentityIdentityRoleTableBase);
            var microsoftAspNetCoreIdentityIdentityRoleMappingBase = new TableMappingBase<ColumnMappingBase>(identityRole, microsoftAspNetCoreIdentityIdentityRoleTableBase, null);
            microsoftAspNetCoreIdentityIdentityRoleTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityRoleMappingBase, false);
            defaultTableMappings.Add(microsoftAspNetCoreIdentityIdentityRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, identityRole.FindProperty("Id")!, microsoftAspNetCoreIdentityIdentityRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)concurrency_stampColumnBase, identityRole.FindProperty("ConcurrencyStamp")!, microsoftAspNetCoreIdentityIdentityRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, identityRole.FindProperty("Name")!, microsoftAspNetCoreIdentityIdentityRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)normalized_nameColumnBase, identityRole.FindProperty("NormalizedName")!, microsoftAspNetCoreIdentityIdentityRoleMappingBase);

            var tableMappings = new List<TableMapping>();
            identityRole.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var asp_net_rolesTable = new Table("asp_net_roles", null, relationalModel);
            var idColumn = new Column("id", "text", asp_net_rolesTable);
            asp_net_rolesTable.Columns.Add("id", idColumn);
            idColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(idColumn);
            var concurrency_stampColumn = new Column("concurrency_stamp", "text", asp_net_rolesTable)
            {
                IsNullable = true
            };
            asp_net_rolesTable.Columns.Add("concurrency_stamp", concurrency_stampColumn);
            concurrency_stampColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(concurrency_stampColumn);
            var nameColumn = new Column("name", "character varying(256)", asp_net_rolesTable)
            {
                IsNullable = true
            };
            asp_net_rolesTable.Columns.Add("name", nameColumn);
            nameColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(nameColumn);
            var normalized_nameColumn = new Column("normalized_name", "character varying(256)", asp_net_rolesTable)
            {
                IsNullable = true
            };
            asp_net_rolesTable.Columns.Add("normalized_name", normalized_nameColumn);
            normalized_nameColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(normalized_nameColumn);
            relationalModel.Tables.Add(("asp_net_roles", null), asp_net_rolesTable);
            var asp_net_rolesTableMapping = new TableMapping(identityRole, asp_net_rolesTable, null);
            asp_net_rolesTable.AddTypeMapping(asp_net_rolesTableMapping, false);
            tableMappings.Add(asp_net_rolesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, identityRole.FindProperty("Id")!, asp_net_rolesTableMapping);
            RelationalModel.CreateColumnMapping(concurrency_stampColumn, identityRole.FindProperty("ConcurrencyStamp")!, asp_net_rolesTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, identityRole.FindProperty("Name")!, asp_net_rolesTableMapping);
            RelationalModel.CreateColumnMapping(normalized_nameColumn, identityRole.FindProperty("NormalizedName")!, asp_net_rolesTableMapping);
            var pk_identity_role = new UniqueConstraint("pk_identity_role", asp_net_rolesTable, new[] { idColumn });
            asp_net_rolesTable.PrimaryKey = pk_identity_role;
            pk_identity_role.SetRowKeyValueFactory(new SimpleRowKeyValueFactory<string>(pk_identity_role));
            var pk_identity_roleKey = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityRole",
                new[] { "Id" });
            pk_identity_role.MappedKeys.Add(pk_identity_roleKey);
            RelationalModel.GetOrCreateUniqueConstraints(pk_identity_roleKey).Add(pk_identity_role);
            asp_net_rolesTable.UniqueConstraints.Add("pk_identity_role", pk_identity_role);
            var role_name_index = new TableIndex(
            "role_name_index", asp_net_rolesTable, new[] { normalized_nameColumn }, true);
            role_name_index.SetRowIndexValueFactory(new SimpleRowIndexValueFactory<string>(role_name_index));
            var role_name_indexIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityRole",
                new[] { "NormalizedName" });
            role_name_index.MappedIndexes.Add(role_name_indexIx);
            RelationalModel.GetOrCreateTableIndexes(role_name_indexIx).Add(role_name_index);
            asp_net_rolesTable.Indexes.Add("role_name_index", role_name_index);

            var identityRoleClaim = FindEntityType("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            identityRoleClaim.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", null, relationalModel);
            var claim_typeColumnBase = new ColumnBase<ColumnMappingBase>("claim_type", "text", microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase.Columns.Add("claim_type", claim_typeColumnBase);
            var claim_valueColumnBase = new ColumnBase<ColumnMappingBase>("claim_value", "text", microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase.Columns.Add("claim_value", claim_valueColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("id", "integer", microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase);
            microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase.Columns.Add("id", idColumnBase0);
            var role_idColumnBase = new ColumnBase<ColumnMappingBase>("role_id", "text", microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase);
            microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase.Columns.Add("role_id", role_idColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase);
            var microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase = new TableMappingBase<ColumnMappingBase>(identityRoleClaim, microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase, null);
            microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase, false);
            defaultTableMappings0.Add(microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, identityRoleClaim.FindProperty("Id")!, microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claim_typeColumnBase, identityRoleClaim.FindProperty("ClaimType")!, microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claim_valueColumnBase, identityRoleClaim.FindProperty("ClaimValue")!, microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)role_idColumnBase, identityRoleClaim.FindProperty("RoleId")!, microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase);

            var tableMappings0 = new List<TableMapping>();
            identityRoleClaim.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var asp_net_role_claimsTable = new Table("asp_net_role_claims", null, relationalModel);
            var idColumn0 = new Column("id", "integer", asp_net_role_claimsTable);
            asp_net_role_claimsTable.Columns.Add("id", idColumn0);
            idColumn0.Accessors = ColumnAccessorsFactory.CreateGeneric<int>(idColumn0);
            idColumn0.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var claim_typeColumn = new Column("claim_type", "text", asp_net_role_claimsTable)
            {
                IsNullable = true
            };
            asp_net_role_claimsTable.Columns.Add("claim_type", claim_typeColumn);
            claim_typeColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(claim_typeColumn);
            var claim_valueColumn = new Column("claim_value", "text", asp_net_role_claimsTable)
            {
                IsNullable = true
            };
            asp_net_role_claimsTable.Columns.Add("claim_value", claim_valueColumn);
            claim_valueColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(claim_valueColumn);
            var role_idColumn = new Column("role_id", "text", asp_net_role_claimsTable);
            asp_net_role_claimsTable.Columns.Add("role_id", role_idColumn);
            role_idColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(role_idColumn);
            relationalModel.Tables.Add(("asp_net_role_claims", null), asp_net_role_claimsTable);
            var asp_net_role_claimsTableMapping = new TableMapping(identityRoleClaim, asp_net_role_claimsTable, null);
            asp_net_role_claimsTable.AddTypeMapping(asp_net_role_claimsTableMapping, false);
            tableMappings0.Add(asp_net_role_claimsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, identityRoleClaim.FindProperty("Id")!, asp_net_role_claimsTableMapping);
            RelationalModel.CreateColumnMapping(claim_typeColumn, identityRoleClaim.FindProperty("ClaimType")!, asp_net_role_claimsTableMapping);
            RelationalModel.CreateColumnMapping(claim_valueColumn, identityRoleClaim.FindProperty("ClaimValue")!, asp_net_role_claimsTableMapping);
            RelationalModel.CreateColumnMapping(role_idColumn, identityRoleClaim.FindProperty("RoleId")!, asp_net_role_claimsTableMapping);
            var pk_identity_role_claim_string = new UniqueConstraint("pk_identity_role_claim_string", asp_net_role_claimsTable, new[] { idColumn0 });
            asp_net_role_claimsTable.PrimaryKey = pk_identity_role_claim_string;
            pk_identity_role_claim_string.SetRowKeyValueFactory(new SimpleRowKeyValueFactory<int>(pk_identity_role_claim_string));
            var pk_identity_role_claim_stringKey = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>",
                new[] { "Id" });
            pk_identity_role_claim_string.MappedKeys.Add(pk_identity_role_claim_stringKey);
            RelationalModel.GetOrCreateUniqueConstraints(pk_identity_role_claim_stringKey).Add(pk_identity_role_claim_string);
            asp_net_role_claimsTable.UniqueConstraints.Add("pk_identity_role_claim_string", pk_identity_role_claim_string);
            var ix_identity_role_claim_string_role_id = new TableIndex(
            "ix_identity_role_claim_string_role_id", asp_net_role_claimsTable, new[] { role_idColumn }, false);
            ix_identity_role_claim_string_role_id.SetRowIndexValueFactory(new SimpleRowIndexValueFactory<string>(ix_identity_role_claim_string_role_id));
            var ix_identity_role_claim_string_role_idIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>",
                new[] { "RoleId" });
            ix_identity_role_claim_string_role_id.MappedIndexes.Add(ix_identity_role_claim_string_role_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_identity_role_claim_string_role_idIx).Add(ix_identity_role_claim_string_role_id);
            asp_net_role_claimsTable.Indexes.Add("ix_identity_role_claim_string_role_id", ix_identity_role_claim_string_role_id);

            var identityUserClaim = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUserClaim.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", null, relationalModel);
            var claim_typeColumnBase0 = new ColumnBase<ColumnMappingBase>("claim_type", "text", microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase.Columns.Add("claim_type", claim_typeColumnBase0);
            var claim_valueColumnBase0 = new ColumnBase<ColumnMappingBase>("claim_value", "text", microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase.Columns.Add("claim_value", claim_valueColumnBase0);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("id", "integer", microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase.Columns.Add("id", idColumnBase1);
            var user_idColumnBase = new ColumnBase<ColumnMappingBase>("user_id", "text", microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase.Columns.Add("user_id", user_idColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase);
            var microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase = new TableMappingBase<ColumnMappingBase>(identityUserClaim, microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase, null);
            microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase, false);
            defaultTableMappings1.Add(microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, identityUserClaim.FindProperty("Id")!, microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claim_typeColumnBase0, identityUserClaim.FindProperty("ClaimType")!, microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claim_valueColumnBase0, identityUserClaim.FindProperty("ClaimValue")!, microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)user_idColumnBase, identityUserClaim.FindProperty("UserId")!, microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase);

            var tableMappings1 = new List<TableMapping>();
            identityUserClaim.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var asp_net_user_claimsTable = new Table("asp_net_user_claims", null, relationalModel);
            var idColumn1 = new Column("id", "integer", asp_net_user_claimsTable);
            asp_net_user_claimsTable.Columns.Add("id", idColumn1);
            idColumn1.Accessors = ColumnAccessorsFactory.CreateGeneric<int>(idColumn1);
            idColumn1.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var claim_typeColumn0 = new Column("claim_type", "text", asp_net_user_claimsTable)
            {
                IsNullable = true
            };
            asp_net_user_claimsTable.Columns.Add("claim_type", claim_typeColumn0);
            claim_typeColumn0.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(claim_typeColumn0);
            var claim_valueColumn0 = new Column("claim_value", "text", asp_net_user_claimsTable)
            {
                IsNullable = true
            };
            asp_net_user_claimsTable.Columns.Add("claim_value", claim_valueColumn0);
            claim_valueColumn0.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(claim_valueColumn0);
            var user_idColumn = new Column("user_id", "text", asp_net_user_claimsTable);
            asp_net_user_claimsTable.Columns.Add("user_id", user_idColumn);
            user_idColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(user_idColumn);
            relationalModel.Tables.Add(("asp_net_user_claims", null), asp_net_user_claimsTable);
            var asp_net_user_claimsTableMapping = new TableMapping(identityUserClaim, asp_net_user_claimsTable, null);
            asp_net_user_claimsTable.AddTypeMapping(asp_net_user_claimsTableMapping, false);
            tableMappings1.Add(asp_net_user_claimsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, identityUserClaim.FindProperty("Id")!, asp_net_user_claimsTableMapping);
            RelationalModel.CreateColumnMapping(claim_typeColumn0, identityUserClaim.FindProperty("ClaimType")!, asp_net_user_claimsTableMapping);
            RelationalModel.CreateColumnMapping(claim_valueColumn0, identityUserClaim.FindProperty("ClaimValue")!, asp_net_user_claimsTableMapping);
            RelationalModel.CreateColumnMapping(user_idColumn, identityUserClaim.FindProperty("UserId")!, asp_net_user_claimsTableMapping);
            var pk_identity_user_claim_string = new UniqueConstraint("pk_identity_user_claim_string", asp_net_user_claimsTable, new[] { idColumn1 });
            asp_net_user_claimsTable.PrimaryKey = pk_identity_user_claim_string;
            pk_identity_user_claim_string.SetRowKeyValueFactory(new SimpleRowKeyValueFactory<int>(pk_identity_user_claim_string));
            var pk_identity_user_claim_stringKey = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserClaim<string>",
                new[] { "Id" });
            pk_identity_user_claim_string.MappedKeys.Add(pk_identity_user_claim_stringKey);
            RelationalModel.GetOrCreateUniqueConstraints(pk_identity_user_claim_stringKey).Add(pk_identity_user_claim_string);
            asp_net_user_claimsTable.UniqueConstraints.Add("pk_identity_user_claim_string", pk_identity_user_claim_string);
            var ix_identity_user_claim_string_user_id = new TableIndex(
            "ix_identity_user_claim_string_user_id", asp_net_user_claimsTable, new[] { user_idColumn }, false);
            ix_identity_user_claim_string_user_id.SetRowIndexValueFactory(new SimpleRowIndexValueFactory<string>(ix_identity_user_claim_string_user_id));
            var ix_identity_user_claim_string_user_idIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityUserClaim<string>",
                new[] { "UserId" });
            ix_identity_user_claim_string_user_id.MappedIndexes.Add(ix_identity_user_claim_string_user_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_identity_user_claim_string_user_idIx).Add(ix_identity_user_claim_string_user_id);
            asp_net_user_claimsTable.Indexes.Add("ix_identity_user_claim_string_user_id", ix_identity_user_claim_string_user_id);

            var identityUserLogin = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUserLogin.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", null, relationalModel);
            var login_providerColumnBase = new ColumnBase<ColumnMappingBase>("login_provider", "text", microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase.Columns.Add("login_provider", login_providerColumnBase);
            var provider_display_nameColumnBase = new ColumnBase<ColumnMappingBase>("provider_display_name", "text", microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase.Columns.Add("provider_display_name", provider_display_nameColumnBase);
            var provider_keyColumnBase = new ColumnBase<ColumnMappingBase>("provider_key", "text", microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase.Columns.Add("provider_key", provider_keyColumnBase);
            var user_idColumnBase0 = new ColumnBase<ColumnMappingBase>("user_id", "text", microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase.Columns.Add("user_id", user_idColumnBase0);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase);
            var microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase = new TableMappingBase<ColumnMappingBase>(identityUserLogin, microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase, null);
            microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase, false);
            defaultTableMappings2.Add(microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)login_providerColumnBase, identityUserLogin.FindProperty("LoginProvider")!, microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)provider_keyColumnBase, identityUserLogin.FindProperty("ProviderKey")!, microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)provider_display_nameColumnBase, identityUserLogin.FindProperty("ProviderDisplayName")!, microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)user_idColumnBase0, identityUserLogin.FindProperty("UserId")!, microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase);

            var tableMappings2 = new List<TableMapping>();
            identityUserLogin.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var asp_net_user_loginsTable = new Table("asp_net_user_logins", null, relationalModel);
            var login_providerColumn = new Column("login_provider", "text", asp_net_user_loginsTable);
            asp_net_user_loginsTable.Columns.Add("login_provider", login_providerColumn);
            login_providerColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(login_providerColumn);
            var provider_keyColumn = new Column("provider_key", "text", asp_net_user_loginsTable);
            asp_net_user_loginsTable.Columns.Add("provider_key", provider_keyColumn);
            provider_keyColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(provider_keyColumn);
            var provider_display_nameColumn = new Column("provider_display_name", "text", asp_net_user_loginsTable)
            {
                IsNullable = true
            };
            asp_net_user_loginsTable.Columns.Add("provider_display_name", provider_display_nameColumn);
            provider_display_nameColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(provider_display_nameColumn);
            var user_idColumn0 = new Column("user_id", "text", asp_net_user_loginsTable);
            asp_net_user_loginsTable.Columns.Add("user_id", user_idColumn0);
            user_idColumn0.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(user_idColumn0);
            relationalModel.Tables.Add(("asp_net_user_logins", null), asp_net_user_loginsTable);
            var asp_net_user_loginsTableMapping = new TableMapping(identityUserLogin, asp_net_user_loginsTable, null);
            asp_net_user_loginsTable.AddTypeMapping(asp_net_user_loginsTableMapping, false);
            tableMappings2.Add(asp_net_user_loginsTableMapping);
            RelationalModel.CreateColumnMapping(login_providerColumn, identityUserLogin.FindProperty("LoginProvider")!, asp_net_user_loginsTableMapping);
            RelationalModel.CreateColumnMapping(provider_keyColumn, identityUserLogin.FindProperty("ProviderKey")!, asp_net_user_loginsTableMapping);
            RelationalModel.CreateColumnMapping(provider_display_nameColumn, identityUserLogin.FindProperty("ProviderDisplayName")!, asp_net_user_loginsTableMapping);
            RelationalModel.CreateColumnMapping(user_idColumn0, identityUserLogin.FindProperty("UserId")!, asp_net_user_loginsTableMapping);
            var pk_identity_user_login_string = new UniqueConstraint("pk_identity_user_login_string", asp_net_user_loginsTable, new[] { login_providerColumn, provider_keyColumn });
            asp_net_user_loginsTable.PrimaryKey = pk_identity_user_login_string;
            pk_identity_user_login_string.SetRowKeyValueFactory(new CompositeRowKeyValueFactory(pk_identity_user_login_string));
            var pk_identity_user_login_stringKey = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserLogin<string>",
                new[] { "LoginProvider", "ProviderKey" });
            pk_identity_user_login_string.MappedKeys.Add(pk_identity_user_login_stringKey);
            RelationalModel.GetOrCreateUniqueConstraints(pk_identity_user_login_stringKey).Add(pk_identity_user_login_string);
            asp_net_user_loginsTable.UniqueConstraints.Add("pk_identity_user_login_string", pk_identity_user_login_string);
            var ix_identity_user_login_string_user_id = new TableIndex(
            "ix_identity_user_login_string_user_id", asp_net_user_loginsTable, new[] { user_idColumn0 }, false);
            ix_identity_user_login_string_user_id.SetRowIndexValueFactory(new SimpleRowIndexValueFactory<string>(ix_identity_user_login_string_user_id));
            var ix_identity_user_login_string_user_idIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityUserLogin<string>",
                new[] { "UserId" });
            ix_identity_user_login_string_user_id.MappedIndexes.Add(ix_identity_user_login_string_user_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_identity_user_login_string_user_idIx).Add(ix_identity_user_login_string_user_id);
            asp_net_user_loginsTable.Indexes.Add("ix_identity_user_login_string_user_id", ix_identity_user_login_string_user_id);

            var identityUserRole = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUserRole.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var microsoftAspNetCoreIdentityIdentityUserRolestringTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", null, relationalModel);
            var role_idColumnBase0 = new ColumnBase<ColumnMappingBase>("role_id", "text", microsoftAspNetCoreIdentityIdentityUserRolestringTableBase);
            microsoftAspNetCoreIdentityIdentityUserRolestringTableBase.Columns.Add("role_id", role_idColumnBase0);
            var user_idColumnBase1 = new ColumnBase<ColumnMappingBase>("user_id", "text", microsoftAspNetCoreIdentityIdentityUserRolestringTableBase);
            microsoftAspNetCoreIdentityIdentityUserRolestringTableBase.Columns.Add("user_id", user_idColumnBase1);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", microsoftAspNetCoreIdentityIdentityUserRolestringTableBase);
            var microsoftAspNetCoreIdentityIdentityUserRolestringMappingBase = new TableMappingBase<ColumnMappingBase>(identityUserRole, microsoftAspNetCoreIdentityIdentityUserRolestringTableBase, null);
            microsoftAspNetCoreIdentityIdentityUserRolestringTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserRolestringMappingBase, false);
            defaultTableMappings3.Add(microsoftAspNetCoreIdentityIdentityUserRolestringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)role_idColumnBase0, identityUserRole.FindProperty("RoleId")!, microsoftAspNetCoreIdentityIdentityUserRolestringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)user_idColumnBase1, identityUserRole.FindProperty("UserId")!, microsoftAspNetCoreIdentityIdentityUserRolestringMappingBase);

            var tableMappings3 = new List<TableMapping>();
            identityUserRole.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3);
            var asp_net_user_rolesTable = new Table("asp_net_user_roles", null, relationalModel);
            var user_idColumn1 = new Column("user_id", "text", asp_net_user_rolesTable);
            asp_net_user_rolesTable.Columns.Add("user_id", user_idColumn1);
            user_idColumn1.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(user_idColumn1);
            var role_idColumn0 = new Column("role_id", "text", asp_net_user_rolesTable);
            asp_net_user_rolesTable.Columns.Add("role_id", role_idColumn0);
            role_idColumn0.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(role_idColumn0);
            relationalModel.Tables.Add(("asp_net_user_roles", null), asp_net_user_rolesTable);
            var asp_net_user_rolesTableMapping = new TableMapping(identityUserRole, asp_net_user_rolesTable, null);
            asp_net_user_rolesTable.AddTypeMapping(asp_net_user_rolesTableMapping, false);
            tableMappings3.Add(asp_net_user_rolesTableMapping);
            RelationalModel.CreateColumnMapping(role_idColumn0, identityUserRole.FindProperty("RoleId")!, asp_net_user_rolesTableMapping);
            RelationalModel.CreateColumnMapping(user_idColumn1, identityUserRole.FindProperty("UserId")!, asp_net_user_rolesTableMapping);
            var pk_identity_user_role_string = new UniqueConstraint("pk_identity_user_role_string", asp_net_user_rolesTable, new[] { user_idColumn1, role_idColumn0 });
            asp_net_user_rolesTable.PrimaryKey = pk_identity_user_role_string;
            pk_identity_user_role_string.SetRowKeyValueFactory(new CompositeRowKeyValueFactory(pk_identity_user_role_string));
            var pk_identity_user_role_stringKey = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserRole<string>",
                new[] { "UserId", "RoleId" });
            pk_identity_user_role_string.MappedKeys.Add(pk_identity_user_role_stringKey);
            RelationalModel.GetOrCreateUniqueConstraints(pk_identity_user_role_stringKey).Add(pk_identity_user_role_string);
            asp_net_user_rolesTable.UniqueConstraints.Add("pk_identity_user_role_string", pk_identity_user_role_string);
            var ix_identity_user_role_string_role_id = new TableIndex(
            "ix_identity_user_role_string_role_id", asp_net_user_rolesTable, new[] { role_idColumn0 }, false);
            ix_identity_user_role_string_role_id.SetRowIndexValueFactory(new SimpleRowIndexValueFactory<string>(ix_identity_user_role_string_role_id));
            var ix_identity_user_role_string_role_idIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityUserRole<string>",
                new[] { "RoleId" });
            ix_identity_user_role_string_role_id.MappedIndexes.Add(ix_identity_user_role_string_role_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_identity_user_role_string_role_idIx).Add(ix_identity_user_role_string_role_id);
            asp_net_user_rolesTable.Indexes.Add("ix_identity_user_role_string_role_id", ix_identity_user_role_string_role_id);

            var identityUserToken = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserToken<string>")!;

            var defaultTableMappings4 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUserToken.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings4);
            var microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", null, relationalModel);
            var login_providerColumnBase0 = new ColumnBase<ColumnMappingBase>("login_provider", "text", microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase.Columns.Add("login_provider", login_providerColumnBase0);
            var nameColumnBase0 = new ColumnBase<ColumnMappingBase>("name", "text", microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase.Columns.Add("name", nameColumnBase0);
            var user_idColumnBase2 = new ColumnBase<ColumnMappingBase>("user_id", "text", microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase.Columns.Add("user_id", user_idColumnBase2);
            var valueColumnBase = new ColumnBase<ColumnMappingBase>("value", "text", microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase.Columns.Add("value", valueColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase);
            var microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase = new TableMappingBase<ColumnMappingBase>(identityUserToken, microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase, null);
            microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase, false);
            defaultTableMappings4.Add(microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)login_providerColumnBase0, identityUserToken.FindProperty("LoginProvider")!, microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase0, identityUserToken.FindProperty("Name")!, microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)user_idColumnBase2, identityUserToken.FindProperty("UserId")!, microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase, identityUserToken.FindProperty("Value")!, microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase);

            var tableMappings4 = new List<TableMapping>();
            identityUserToken.SetRuntimeAnnotation("Relational:TableMappings", tableMappings4);
            var asp_net_user_tokensTable = new Table("asp_net_user_tokens", null, relationalModel);
            var user_idColumn2 = new Column("user_id", "text", asp_net_user_tokensTable);
            asp_net_user_tokensTable.Columns.Add("user_id", user_idColumn2);
            user_idColumn2.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(user_idColumn2);
            var login_providerColumn0 = new Column("login_provider", "text", asp_net_user_tokensTable);
            asp_net_user_tokensTable.Columns.Add("login_provider", login_providerColumn0);
            login_providerColumn0.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(login_providerColumn0);
            var nameColumn0 = new Column("name", "text", asp_net_user_tokensTable);
            asp_net_user_tokensTable.Columns.Add("name", nameColumn0);
            nameColumn0.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(nameColumn0);
            var valueColumn = new Column("value", "text", asp_net_user_tokensTable)
            {
                IsNullable = true
            };
            asp_net_user_tokensTable.Columns.Add("value", valueColumn);
            valueColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(valueColumn);
            relationalModel.Tables.Add(("asp_net_user_tokens", null), asp_net_user_tokensTable);
            var asp_net_user_tokensTableMapping = new TableMapping(identityUserToken, asp_net_user_tokensTable, null);
            asp_net_user_tokensTable.AddTypeMapping(asp_net_user_tokensTableMapping, false);
            tableMappings4.Add(asp_net_user_tokensTableMapping);
            RelationalModel.CreateColumnMapping(login_providerColumn0, identityUserToken.FindProperty("LoginProvider")!, asp_net_user_tokensTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn0, identityUserToken.FindProperty("Name")!, asp_net_user_tokensTableMapping);
            RelationalModel.CreateColumnMapping(user_idColumn2, identityUserToken.FindProperty("UserId")!, asp_net_user_tokensTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn, identityUserToken.FindProperty("Value")!, asp_net_user_tokensTableMapping);
            var pk_identity_user_token_string = new UniqueConstraint("pk_identity_user_token_string", asp_net_user_tokensTable, new[] { user_idColumn2, login_providerColumn0, nameColumn0 });
            asp_net_user_tokensTable.PrimaryKey = pk_identity_user_token_string;
            pk_identity_user_token_string.SetRowKeyValueFactory(new CompositeRowKeyValueFactory(pk_identity_user_token_string));
            var pk_identity_user_token_stringKey = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserToken<string>",
                new[] { "UserId", "LoginProvider", "Name" });
            pk_identity_user_token_string.MappedKeys.Add(pk_identity_user_token_stringKey);
            RelationalModel.GetOrCreateUniqueConstraints(pk_identity_user_token_stringKey).Add(pk_identity_user_token_string);
            asp_net_user_tokensTable.UniqueConstraints.Add("pk_identity_user_token_string", pk_identity_user_token_string);

            var applicationUser = FindEntityType("Mqtt.Server.Identity.Data.ApplicationUser")!;

            var defaultTableMappings5 = new List<TableMappingBase<ColumnMappingBase>>();
            applicationUser.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings5);
            var mqttServerIdentityDataApplicationUserTableBase = new TableBase("Mqtt.Server.Identity.Data.ApplicationUser", null, relationalModel);
            var access_failed_countColumnBase = new ColumnBase<ColumnMappingBase>("access_failed_count", "integer", mqttServerIdentityDataApplicationUserTableBase);
            mqttServerIdentityDataApplicationUserTableBase.Columns.Add("access_failed_count", access_failed_countColumnBase);
            var concurrency_stampColumnBase0 = new ColumnBase<ColumnMappingBase>("concurrency_stamp", "text", mqttServerIdentityDataApplicationUserTableBase)
            {
                IsNullable = true
            };
            mqttServerIdentityDataApplicationUserTableBase.Columns.Add("concurrency_stamp", concurrency_stampColumnBase0);
            var emailColumnBase = new ColumnBase<ColumnMappingBase>("email", "character varying(256)", mqttServerIdentityDataApplicationUserTableBase)
            {
                IsNullable = true
            };
            mqttServerIdentityDataApplicationUserTableBase.Columns.Add("email", emailColumnBase);
            var email_confirmedColumnBase = new ColumnBase<ColumnMappingBase>("email_confirmed", "boolean", mqttServerIdentityDataApplicationUserTableBase);
            mqttServerIdentityDataApplicationUserTableBase.Columns.Add("email_confirmed", email_confirmedColumnBase);
            var idColumnBase2 = new ColumnBase<ColumnMappingBase>("id", "text", mqttServerIdentityDataApplicationUserTableBase);
            mqttServerIdentityDataApplicationUserTableBase.Columns.Add("id", idColumnBase2);
            var lockout_enabledColumnBase = new ColumnBase<ColumnMappingBase>("lockout_enabled", "boolean", mqttServerIdentityDataApplicationUserTableBase);
            mqttServerIdentityDataApplicationUserTableBase.Columns.Add("lockout_enabled", lockout_enabledColumnBase);
            var lockout_endColumnBase = new ColumnBase<ColumnMappingBase>("lockout_end", "timestamp with time zone", mqttServerIdentityDataApplicationUserTableBase)
            {
                IsNullable = true
            };
            mqttServerIdentityDataApplicationUserTableBase.Columns.Add("lockout_end", lockout_endColumnBase);
            var normalized_emailColumnBase = new ColumnBase<ColumnMappingBase>("normalized_email", "character varying(256)", mqttServerIdentityDataApplicationUserTableBase)
            {
                IsNullable = true
            };
            mqttServerIdentityDataApplicationUserTableBase.Columns.Add("normalized_email", normalized_emailColumnBase);
            var normalized_user_nameColumnBase = new ColumnBase<ColumnMappingBase>("normalized_user_name", "character varying(256)", mqttServerIdentityDataApplicationUserTableBase)
            {
                IsNullable = true
            };
            mqttServerIdentityDataApplicationUserTableBase.Columns.Add("normalized_user_name", normalized_user_nameColumnBase);
            var password_hashColumnBase = new ColumnBase<ColumnMappingBase>("password_hash", "text", mqttServerIdentityDataApplicationUserTableBase)
            {
                IsNullable = true
            };
            mqttServerIdentityDataApplicationUserTableBase.Columns.Add("password_hash", password_hashColumnBase);
            var phone_numberColumnBase = new ColumnBase<ColumnMappingBase>("phone_number", "text", mqttServerIdentityDataApplicationUserTableBase)
            {
                IsNullable = true
            };
            mqttServerIdentityDataApplicationUserTableBase.Columns.Add("phone_number", phone_numberColumnBase);
            var phone_number_confirmedColumnBase = new ColumnBase<ColumnMappingBase>("phone_number_confirmed", "boolean", mqttServerIdentityDataApplicationUserTableBase);
            mqttServerIdentityDataApplicationUserTableBase.Columns.Add("phone_number_confirmed", phone_number_confirmedColumnBase);
            var security_stampColumnBase = new ColumnBase<ColumnMappingBase>("security_stamp", "text", mqttServerIdentityDataApplicationUserTableBase)
            {
                IsNullable = true
            };
            mqttServerIdentityDataApplicationUserTableBase.Columns.Add("security_stamp", security_stampColumnBase);
            var two_factor_enabledColumnBase = new ColumnBase<ColumnMappingBase>("two_factor_enabled", "boolean", mqttServerIdentityDataApplicationUserTableBase);
            mqttServerIdentityDataApplicationUserTableBase.Columns.Add("two_factor_enabled", two_factor_enabledColumnBase);
            var user_nameColumnBase = new ColumnBase<ColumnMappingBase>("user_name", "character varying(256)", mqttServerIdentityDataApplicationUserTableBase)
            {
                IsNullable = true
            };
            mqttServerIdentityDataApplicationUserTableBase.Columns.Add("user_name", user_nameColumnBase);
            relationalModel.DefaultTables.Add("Mqtt.Server.Identity.Data.ApplicationUser", mqttServerIdentityDataApplicationUserTableBase);
            var mqttServerIdentityDataApplicationUserMappingBase = new TableMappingBase<ColumnMappingBase>(applicationUser, mqttServerIdentityDataApplicationUserTableBase, null);
            mqttServerIdentityDataApplicationUserTableBase.AddTypeMapping(mqttServerIdentityDataApplicationUserMappingBase, false);
            defaultTableMappings5.Add(mqttServerIdentityDataApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase2, applicationUser.FindProperty("Id")!, mqttServerIdentityDataApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)access_failed_countColumnBase, applicationUser.FindProperty("AccessFailedCount")!, mqttServerIdentityDataApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)concurrency_stampColumnBase0, applicationUser.FindProperty("ConcurrencyStamp")!, mqttServerIdentityDataApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)emailColumnBase, applicationUser.FindProperty("Email")!, mqttServerIdentityDataApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)email_confirmedColumnBase, applicationUser.FindProperty("EmailConfirmed")!, mqttServerIdentityDataApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lockout_enabledColumnBase, applicationUser.FindProperty("LockoutEnabled")!, mqttServerIdentityDataApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lockout_endColumnBase, applicationUser.FindProperty("LockoutEnd")!, mqttServerIdentityDataApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)normalized_emailColumnBase, applicationUser.FindProperty("NormalizedEmail")!, mqttServerIdentityDataApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)normalized_user_nameColumnBase, applicationUser.FindProperty("NormalizedUserName")!, mqttServerIdentityDataApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)password_hashColumnBase, applicationUser.FindProperty("PasswordHash")!, mqttServerIdentityDataApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)phone_numberColumnBase, applicationUser.FindProperty("PhoneNumber")!, mqttServerIdentityDataApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)phone_number_confirmedColumnBase, applicationUser.FindProperty("PhoneNumberConfirmed")!, mqttServerIdentityDataApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)security_stampColumnBase, applicationUser.FindProperty("SecurityStamp")!, mqttServerIdentityDataApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)two_factor_enabledColumnBase, applicationUser.FindProperty("TwoFactorEnabled")!, mqttServerIdentityDataApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)user_nameColumnBase, applicationUser.FindProperty("UserName")!, mqttServerIdentityDataApplicationUserMappingBase);

            var tableMappings5 = new List<TableMapping>();
            applicationUser.SetRuntimeAnnotation("Relational:TableMappings", tableMappings5);
            var asp_net_usersTable = new Table("asp_net_users", null, relationalModel);
            var idColumn2 = new Column("id", "text", asp_net_usersTable);
            asp_net_usersTable.Columns.Add("id", idColumn2);
            idColumn2.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(idColumn2);
            var access_failed_countColumn = new Column("access_failed_count", "integer", asp_net_usersTable);
            asp_net_usersTable.Columns.Add("access_failed_count", access_failed_countColumn);
            access_failed_countColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<int>(access_failed_countColumn);
            var concurrency_stampColumn0 = new Column("concurrency_stamp", "text", asp_net_usersTable)
            {
                IsNullable = true
            };
            asp_net_usersTable.Columns.Add("concurrency_stamp", concurrency_stampColumn0);
            concurrency_stampColumn0.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(concurrency_stampColumn0);
            var emailColumn = new Column("email", "character varying(256)", asp_net_usersTable)
            {
                IsNullable = true
            };
            asp_net_usersTable.Columns.Add("email", emailColumn);
            emailColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(emailColumn);
            var email_confirmedColumn = new Column("email_confirmed", "boolean", asp_net_usersTable);
            asp_net_usersTable.Columns.Add("email_confirmed", email_confirmedColumn);
            email_confirmedColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<bool>(email_confirmedColumn);
            var lockout_enabledColumn = new Column("lockout_enabled", "boolean", asp_net_usersTable);
            asp_net_usersTable.Columns.Add("lockout_enabled", lockout_enabledColumn);
            lockout_enabledColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<bool>(lockout_enabledColumn);
            var lockout_endColumn = new Column("lockout_end", "timestamp with time zone", asp_net_usersTable)
            {
                IsNullable = true
            };
            asp_net_usersTable.Columns.Add("lockout_end", lockout_endColumn);
            lockout_endColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<DateTimeOffset>(lockout_endColumn);
            var normalized_emailColumn = new Column("normalized_email", "character varying(256)", asp_net_usersTable)
            {
                IsNullable = true
            };
            asp_net_usersTable.Columns.Add("normalized_email", normalized_emailColumn);
            normalized_emailColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(normalized_emailColumn);
            var normalized_user_nameColumn = new Column("normalized_user_name", "character varying(256)", asp_net_usersTable)
            {
                IsNullable = true
            };
            asp_net_usersTable.Columns.Add("normalized_user_name", normalized_user_nameColumn);
            normalized_user_nameColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(normalized_user_nameColumn);
            var password_hashColumn = new Column("password_hash", "text", asp_net_usersTable)
            {
                IsNullable = true
            };
            asp_net_usersTable.Columns.Add("password_hash", password_hashColumn);
            password_hashColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(password_hashColumn);
            var phone_numberColumn = new Column("phone_number", "text", asp_net_usersTable)
            {
                IsNullable = true
            };
            asp_net_usersTable.Columns.Add("phone_number", phone_numberColumn);
            phone_numberColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(phone_numberColumn);
            var phone_number_confirmedColumn = new Column("phone_number_confirmed", "boolean", asp_net_usersTable);
            asp_net_usersTable.Columns.Add("phone_number_confirmed", phone_number_confirmedColumn);
            phone_number_confirmedColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<bool>(phone_number_confirmedColumn);
            var security_stampColumn = new Column("security_stamp", "text", asp_net_usersTable)
            {
                IsNullable = true
            };
            asp_net_usersTable.Columns.Add("security_stamp", security_stampColumn);
            security_stampColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(security_stampColumn);
            var two_factor_enabledColumn = new Column("two_factor_enabled", "boolean", asp_net_usersTable);
            asp_net_usersTable.Columns.Add("two_factor_enabled", two_factor_enabledColumn);
            two_factor_enabledColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<bool>(two_factor_enabledColumn);
            var user_nameColumn = new Column("user_name", "character varying(256)", asp_net_usersTable)
            {
                IsNullable = true
            };
            asp_net_usersTable.Columns.Add("user_name", user_nameColumn);
            user_nameColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(user_nameColumn);
            relationalModel.Tables.Add(("asp_net_users", null), asp_net_usersTable);
            var asp_net_usersTableMapping = new TableMapping(applicationUser, asp_net_usersTable, null);
            asp_net_usersTable.AddTypeMapping(asp_net_usersTableMapping, false);
            tableMappings5.Add(asp_net_usersTableMapping);
            RelationalModel.CreateColumnMapping(idColumn2, applicationUser.FindProperty("Id")!, asp_net_usersTableMapping);
            RelationalModel.CreateColumnMapping(access_failed_countColumn, applicationUser.FindProperty("AccessFailedCount")!, asp_net_usersTableMapping);
            RelationalModel.CreateColumnMapping(concurrency_stampColumn0, applicationUser.FindProperty("ConcurrencyStamp")!, asp_net_usersTableMapping);
            RelationalModel.CreateColumnMapping(emailColumn, applicationUser.FindProperty("Email")!, asp_net_usersTableMapping);
            RelationalModel.CreateColumnMapping(email_confirmedColumn, applicationUser.FindProperty("EmailConfirmed")!, asp_net_usersTableMapping);
            RelationalModel.CreateColumnMapping(lockout_enabledColumn, applicationUser.FindProperty("LockoutEnabled")!, asp_net_usersTableMapping);
            RelationalModel.CreateColumnMapping(lockout_endColumn, applicationUser.FindProperty("LockoutEnd")!, asp_net_usersTableMapping);
            RelationalModel.CreateColumnMapping(normalized_emailColumn, applicationUser.FindProperty("NormalizedEmail")!, asp_net_usersTableMapping);
            RelationalModel.CreateColumnMapping(normalized_user_nameColumn, applicationUser.FindProperty("NormalizedUserName")!, asp_net_usersTableMapping);
            RelationalModel.CreateColumnMapping(password_hashColumn, applicationUser.FindProperty("PasswordHash")!, asp_net_usersTableMapping);
            RelationalModel.CreateColumnMapping(phone_numberColumn, applicationUser.FindProperty("PhoneNumber")!, asp_net_usersTableMapping);
            RelationalModel.CreateColumnMapping(phone_number_confirmedColumn, applicationUser.FindProperty("PhoneNumberConfirmed")!, asp_net_usersTableMapping);
            RelationalModel.CreateColumnMapping(security_stampColumn, applicationUser.FindProperty("SecurityStamp")!, asp_net_usersTableMapping);
            RelationalModel.CreateColumnMapping(two_factor_enabledColumn, applicationUser.FindProperty("TwoFactorEnabled")!, asp_net_usersTableMapping);
            RelationalModel.CreateColumnMapping(user_nameColumn, applicationUser.FindProperty("UserName")!, asp_net_usersTableMapping);
            var pk_application_user = new UniqueConstraint("pk_application_user", asp_net_usersTable, new[] { idColumn2 });
            asp_net_usersTable.PrimaryKey = pk_application_user;
            pk_application_user.SetRowKeyValueFactory(new SimpleRowKeyValueFactory<string>(pk_application_user));
            var pk_application_userKey = RelationalModel.GetKey(this,
                "Mqtt.Server.Identity.Data.ApplicationUser",
                new[] { "Id" });
            pk_application_user.MappedKeys.Add(pk_application_userKey);
            RelationalModel.GetOrCreateUniqueConstraints(pk_application_userKey).Add(pk_application_user);
            asp_net_usersTable.UniqueConstraints.Add("pk_application_user", pk_application_user);
            var email_index = new TableIndex(
            "email_index", asp_net_usersTable, new[] { normalized_emailColumn }, false);
            email_index.SetRowIndexValueFactory(new SimpleRowIndexValueFactory<string>(email_index));
            var email_indexIx = RelationalModel.GetIndex(this,
                "Mqtt.Server.Identity.Data.ApplicationUser",
                new[] { "NormalizedEmail" });
            email_index.MappedIndexes.Add(email_indexIx);
            RelationalModel.GetOrCreateTableIndexes(email_indexIx).Add(email_index);
            asp_net_usersTable.Indexes.Add("email_index", email_index);
            var user_name_index = new TableIndex(
            "user_name_index", asp_net_usersTable, new[] { normalized_user_nameColumn }, true);
            user_name_index.SetRowIndexValueFactory(new SimpleRowIndexValueFactory<string>(user_name_index));
            var user_name_indexIx = RelationalModel.GetIndex(this,
                "Mqtt.Server.Identity.Data.ApplicationUser",
                new[] { "NormalizedUserName" });
            user_name_index.MappedIndexes.Add(user_name_indexIx);
            RelationalModel.GetOrCreateTableIndexes(user_name_indexIx).Add(user_name_index);
            asp_net_usersTable.Indexes.Add("user_name_index", user_name_index);
            var fk_identity_role_claim_string_asp_net_roles_identity_role_id = new ForeignKeyConstraint(
                "fk_identity_role_claim_string_asp_net_roles_identity_role_id", asp_net_role_claimsTable, asp_net_rolesTable,
                new[] { role_idColumn },
                asp_net_rolesTable.FindUniqueConstraint("pk_identity_role")!, ReferentialAction.Cascade);
            fk_identity_role_claim_string_asp_net_roles_identity_role_id.SetRowForeignKeyValueFactory(RowForeignKeyValueFactoryFactory.CreateSimpleNullableFactory<string, string>(fk_identity_role_claim_string_asp_net_roles_identity_role_id));
            var fk_identity_role_claim_string_asp_net_roles_identity_role_idFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>",
                new[] { "RoleId" },
                "Microsoft.AspNetCore.Identity.IdentityRole",
                new[] { "Id" });
            fk_identity_role_claim_string_asp_net_roles_identity_role_id.MappedForeignKeys.Add(fk_identity_role_claim_string_asp_net_roles_identity_role_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_identity_role_claim_string_asp_net_roles_identity_role_idFk).Add(fk_identity_role_claim_string_asp_net_roles_identity_role_id);
            asp_net_role_claimsTable.ForeignKeyConstraints.Add(fk_identity_role_claim_string_asp_net_roles_identity_role_id);
            asp_net_rolesTable.ReferencingForeignKeyConstraints.Add(fk_identity_role_claim_string_asp_net_roles_identity_role_id);
            var fk_identity_user_claim_string_asp_net_users_application_user_id = new ForeignKeyConstraint(
                "fk_identity_user_claim_string_asp_net_users_application_user_id", asp_net_user_claimsTable, asp_net_usersTable,
                new[] { user_idColumn },
                asp_net_usersTable.FindUniqueConstraint("pk_application_user")!, ReferentialAction.Cascade);
            fk_identity_user_claim_string_asp_net_users_application_user_id.SetRowForeignKeyValueFactory(RowForeignKeyValueFactoryFactory.CreateSimpleNullableFactory<string, string>(fk_identity_user_claim_string_asp_net_users_application_user_id));
            var fk_identity_user_claim_string_asp_net_users_application_user_idFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserClaim<string>",
                new[] { "UserId" },
                "Mqtt.Server.Identity.Data.ApplicationUser",
                new[] { "Id" });
            fk_identity_user_claim_string_asp_net_users_application_user_id.MappedForeignKeys.Add(fk_identity_user_claim_string_asp_net_users_application_user_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_identity_user_claim_string_asp_net_users_application_user_idFk).Add(fk_identity_user_claim_string_asp_net_users_application_user_id);
            asp_net_user_claimsTable.ForeignKeyConstraints.Add(fk_identity_user_claim_string_asp_net_users_application_user_id);
            asp_net_usersTable.ReferencingForeignKeyConstraints.Add(fk_identity_user_claim_string_asp_net_users_application_user_id);
            var fk_identity_user_login_string_asp_net_users_application_user_id = new ForeignKeyConstraint(
                "fk_identity_user_login_string_asp_net_users_application_user_id", asp_net_user_loginsTable, asp_net_usersTable,
                new[] { user_idColumn0 },
                asp_net_usersTable.FindUniqueConstraint("pk_application_user")!, ReferentialAction.Cascade);
            fk_identity_user_login_string_asp_net_users_application_user_id.SetRowForeignKeyValueFactory(RowForeignKeyValueFactoryFactory.CreateSimpleNullableFactory<string, string>(fk_identity_user_login_string_asp_net_users_application_user_id));
            var fk_identity_user_login_string_asp_net_users_application_user_idFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserLogin<string>",
                new[] { "UserId" },
                "Mqtt.Server.Identity.Data.ApplicationUser",
                new[] { "Id" });
            fk_identity_user_login_string_asp_net_users_application_user_id.MappedForeignKeys.Add(fk_identity_user_login_string_asp_net_users_application_user_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_identity_user_login_string_asp_net_users_application_user_idFk).Add(fk_identity_user_login_string_asp_net_users_application_user_id);
            asp_net_user_loginsTable.ForeignKeyConstraints.Add(fk_identity_user_login_string_asp_net_users_application_user_id);
            asp_net_usersTable.ReferencingForeignKeyConstraints.Add(fk_identity_user_login_string_asp_net_users_application_user_id);
            var fk_identity_user_role_string_asp_net_roles_identity_role_id = new ForeignKeyConstraint(
                "fk_identity_user_role_string_asp_net_roles_identity_role_id", asp_net_user_rolesTable, asp_net_rolesTable,
                new[] { role_idColumn0 },
                asp_net_rolesTable.FindUniqueConstraint("pk_identity_role")!, ReferentialAction.Cascade);
            fk_identity_user_role_string_asp_net_roles_identity_role_id.SetRowForeignKeyValueFactory(RowForeignKeyValueFactoryFactory.CreateSimpleNullableFactory<string, string>(fk_identity_user_role_string_asp_net_roles_identity_role_id));
            var fk_identity_user_role_string_asp_net_roles_identity_role_idFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserRole<string>",
                new[] { "RoleId" },
                "Microsoft.AspNetCore.Identity.IdentityRole",
                new[] { "Id" });
            fk_identity_user_role_string_asp_net_roles_identity_role_id.MappedForeignKeys.Add(fk_identity_user_role_string_asp_net_roles_identity_role_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_identity_user_role_string_asp_net_roles_identity_role_idFk).Add(fk_identity_user_role_string_asp_net_roles_identity_role_id);
            asp_net_user_rolesTable.ForeignKeyConstraints.Add(fk_identity_user_role_string_asp_net_roles_identity_role_id);
            asp_net_rolesTable.ReferencingForeignKeyConstraints.Add(fk_identity_user_role_string_asp_net_roles_identity_role_id);
            var fk_identity_user_role_string_asp_net_users_application_user_id = new ForeignKeyConstraint(
                "fk_identity_user_role_string_asp_net_users_application_user_id", asp_net_user_rolesTable, asp_net_usersTable,
                new[] { user_idColumn1 },
                asp_net_usersTable.FindUniqueConstraint("pk_application_user")!, ReferentialAction.Cascade);
            fk_identity_user_role_string_asp_net_users_application_user_id.SetRowForeignKeyValueFactory(RowForeignKeyValueFactoryFactory.CreateSimpleNullableFactory<string, string>(fk_identity_user_role_string_asp_net_users_application_user_id));
            var fk_identity_user_role_string_asp_net_users_application_user_idFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserRole<string>",
                new[] { "UserId" },
                "Mqtt.Server.Identity.Data.ApplicationUser",
                new[] { "Id" });
            fk_identity_user_role_string_asp_net_users_application_user_id.MappedForeignKeys.Add(fk_identity_user_role_string_asp_net_users_application_user_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_identity_user_role_string_asp_net_users_application_user_idFk).Add(fk_identity_user_role_string_asp_net_users_application_user_id);
            asp_net_user_rolesTable.ForeignKeyConstraints.Add(fk_identity_user_role_string_asp_net_users_application_user_id);
            asp_net_usersTable.ReferencingForeignKeyConstraints.Add(fk_identity_user_role_string_asp_net_users_application_user_id);
            var fk_identity_user_token_string_asp_net_users_application_user_id = new ForeignKeyConstraint(
                "fk_identity_user_token_string_asp_net_users_application_user_id", asp_net_user_tokensTable, asp_net_usersTable,
                new[] { user_idColumn2 },
                asp_net_usersTable.FindUniqueConstraint("pk_application_user")!, ReferentialAction.Cascade);
            fk_identity_user_token_string_asp_net_users_application_user_id.SetRowForeignKeyValueFactory(RowForeignKeyValueFactoryFactory.CreateSimpleNullableFactory<string, string>(fk_identity_user_token_string_asp_net_users_application_user_id));
            var fk_identity_user_token_string_asp_net_users_application_user_idFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserToken<string>",
                new[] { "UserId" },
                "Mqtt.Server.Identity.Data.ApplicationUser",
                new[] { "Id" });
            fk_identity_user_token_string_asp_net_users_application_user_id.MappedForeignKeys.Add(fk_identity_user_token_string_asp_net_users_application_user_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_identity_user_token_string_asp_net_users_application_user_idFk).Add(fk_identity_user_token_string_asp_net_users_application_user_id);
            asp_net_user_tokensTable.ForeignKeyConstraints.Add(fk_identity_user_token_string_asp_net_users_application_user_id);
            asp_net_usersTable.ReferencingForeignKeyConstraints.Add(fk_identity_user_token_string_asp_net_users_application_user_id);
            return relationalModel.MakeReadOnly();
        }
    }
}