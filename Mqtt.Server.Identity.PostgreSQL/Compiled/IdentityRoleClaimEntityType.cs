// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Mqtt.Server.Identity.PostgreSQL.Compiled
{
    [EntityFrameworkInternal]
    public partial class IdentityRoleClaimEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>",
                typeof(IdentityRoleClaim<string>),
                baseEntityType,
                propertyCount: 4,
                foreignKeyCount: 1,
                unnamedIndexCount: 1,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(int),
                propertyInfo: typeof(IdentityRoleClaim<string>).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentityRoleClaim<string>).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);
            id.SetGetter(
                int (IdentityRoleClaim<string> entity) => IdentityRoleClaimUnsafeAccessors<string>.Id(entity),
                bool (IdentityRoleClaim<string> entity) => IdentityRoleClaimUnsafeAccessors<string>.Id(entity) == 0,
                int (IdentityRoleClaim<string> instance) => IdentityRoleClaimUnsafeAccessors<string>.Id(instance),
                bool (IdentityRoleClaim<string> instance) => IdentityRoleClaimUnsafeAccessors<string>.Id(instance) == 0);
            id.SetSetter(
                (IdentityRoleClaim<string> entity, int value) => IdentityRoleClaimUnsafeAccessors<string>.Id(entity) = value);
            id.SetMaterializationSetter(
                (IdentityRoleClaim<string> entity, int value) => IdentityRoleClaimUnsafeAccessors<string>.Id(entity) = value);
            id.SetAccessors(
                int (InternalEntityEntry entry) => (entry.FlaggedAsStoreGenerated(0) ? entry.ReadStoreGeneratedValue<int>(0) : (entry.FlaggedAsTemporary(0) && IdentityRoleClaimUnsafeAccessors<string>.Id(((IdentityRoleClaim<string>)(entry.Entity))) == 0 ? entry.ReadTemporaryValue<int>(0) : IdentityRoleClaimUnsafeAccessors<string>.Id(((IdentityRoleClaim<string>)(entry.Entity))))),
                int (InternalEntityEntry entry) => IdentityRoleClaimUnsafeAccessors<string>.Id(((IdentityRoleClaim<string>)(entry.Entity))),
                int (InternalEntityEntry entry) => entry.ReadOriginalValue<int>(id, 0),
                int (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<int>(id, 0),
                object (ValueBuffer valueBuffer) => valueBuffer[0]);
            id.SetPropertyIndexes(
                index: 0,
                originalValueIndex: 0,
                shadowIndex: -1,
                relationshipIndex: 0,
                storeGenerationIndex: 0);
            id.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                keyComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "integer"));
            id.SetCurrentValueComparer(new EntryCurrentValueComparer<int>(id));
            id.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            id.AddAnnotation("Relational:ColumnName", "id");

            var claimType = runtimeEntityType.AddProperty(
                "ClaimType",
                typeof(string),
                propertyInfo: typeof(IdentityRoleClaim<string>).GetProperty("ClaimType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentityRoleClaim<string>).GetField("<ClaimType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            claimType.SetGetter(
                string (IdentityRoleClaim<string> entity) => IdentityRoleClaimUnsafeAccessors<string>.ClaimType(entity),
                bool (IdentityRoleClaim<string> entity) => IdentityRoleClaimUnsafeAccessors<string>.ClaimType(entity) == null,
                string (IdentityRoleClaim<string> instance) => IdentityRoleClaimUnsafeAccessors<string>.ClaimType(instance),
                bool (IdentityRoleClaim<string> instance) => IdentityRoleClaimUnsafeAccessors<string>.ClaimType(instance) == null);
            claimType.SetSetter(
                (IdentityRoleClaim<string> entity, string value) => IdentityRoleClaimUnsafeAccessors<string>.ClaimType(entity) = value);
            claimType.SetMaterializationSetter(
                (IdentityRoleClaim<string> entity, string value) => IdentityRoleClaimUnsafeAccessors<string>.ClaimType(entity) = value);
            claimType.SetAccessors(
                string (InternalEntityEntry entry) => IdentityRoleClaimUnsafeAccessors<string>.ClaimType(((IdentityRoleClaim<string>)(entry.Entity))),
                string (InternalEntityEntry entry) => IdentityRoleClaimUnsafeAccessors<string>.ClaimType(((IdentityRoleClaim<string>)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(claimType, 1),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(claimType),
                object (ValueBuffer valueBuffer) => valueBuffer[1]);
            claimType.SetPropertyIndexes(
                index: 1,
                originalValueIndex: 1,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            claimType.TypeMapping = StringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                keyComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    dbType: System.Data.DbType.String));
            claimType.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
            claimType.AddAnnotation("Relational:ColumnName", "claim_type");

            var claimValue = runtimeEntityType.AddProperty(
                "ClaimValue",
                typeof(string),
                propertyInfo: typeof(IdentityRoleClaim<string>).GetProperty("ClaimValue", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentityRoleClaim<string>).GetField("<ClaimValue>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            claimValue.SetGetter(
                string (IdentityRoleClaim<string> entity) => IdentityRoleClaimUnsafeAccessors<string>.ClaimValue(entity),
                bool (IdentityRoleClaim<string> entity) => IdentityRoleClaimUnsafeAccessors<string>.ClaimValue(entity) == null,
                string (IdentityRoleClaim<string> instance) => IdentityRoleClaimUnsafeAccessors<string>.ClaimValue(instance),
                bool (IdentityRoleClaim<string> instance) => IdentityRoleClaimUnsafeAccessors<string>.ClaimValue(instance) == null);
            claimValue.SetSetter(
                (IdentityRoleClaim<string> entity, string value) => IdentityRoleClaimUnsafeAccessors<string>.ClaimValue(entity) = value);
            claimValue.SetMaterializationSetter(
                (IdentityRoleClaim<string> entity, string value) => IdentityRoleClaimUnsafeAccessors<string>.ClaimValue(entity) = value);
            claimValue.SetAccessors(
                string (InternalEntityEntry entry) => IdentityRoleClaimUnsafeAccessors<string>.ClaimValue(((IdentityRoleClaim<string>)(entry.Entity))),
                string (InternalEntityEntry entry) => IdentityRoleClaimUnsafeAccessors<string>.ClaimValue(((IdentityRoleClaim<string>)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(claimValue, 2),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(claimValue),
                object (ValueBuffer valueBuffer) => valueBuffer[2]);
            claimValue.SetPropertyIndexes(
                index: 2,
                originalValueIndex: 2,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            claimValue.TypeMapping = StringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                keyComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    dbType: System.Data.DbType.String));
            claimValue.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
            claimValue.AddAnnotation("Relational:ColumnName", "claim_value");

            var roleId = runtimeEntityType.AddProperty(
                "RoleId",
                typeof(string),
                propertyInfo: typeof(IdentityRoleClaim<string>).GetProperty("RoleId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentityRoleClaim<string>).GetField("<RoleId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            roleId.SetGetter(
                string (IdentityRoleClaim<string> entity) => IdentityRoleClaimUnsafeAccessors<string>.RoleId(entity),
                bool (IdentityRoleClaim<string> entity) => IdentityRoleClaimUnsafeAccessors<string>.RoleId(entity) == null,
                string (IdentityRoleClaim<string> instance) => IdentityRoleClaimUnsafeAccessors<string>.RoleId(instance),
                bool (IdentityRoleClaim<string> instance) => IdentityRoleClaimUnsafeAccessors<string>.RoleId(instance) == null);
            roleId.SetSetter(
                (IdentityRoleClaim<string> entity, string value) => IdentityRoleClaimUnsafeAccessors<string>.RoleId(entity) = value);
            roleId.SetMaterializationSetter(
                (IdentityRoleClaim<string> entity, string value) => IdentityRoleClaimUnsafeAccessors<string>.RoleId(entity) = value);
            roleId.SetAccessors(
                string (InternalEntityEntry entry) => (entry.FlaggedAsStoreGenerated(3) ? entry.ReadStoreGeneratedValue<string>(1) : (entry.FlaggedAsTemporary(3) && IdentityRoleClaimUnsafeAccessors<string>.RoleId(((IdentityRoleClaim<string>)(entry.Entity))) == null ? entry.ReadTemporaryValue<string>(1) : IdentityRoleClaimUnsafeAccessors<string>.RoleId(((IdentityRoleClaim<string>)(entry.Entity))))),
                string (InternalEntityEntry entry) => IdentityRoleClaimUnsafeAccessors<string>.RoleId(((IdentityRoleClaim<string>)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(roleId, 3),
                string (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<string>(roleId, 1),
                object (ValueBuffer valueBuffer) => valueBuffer[3]);
            roleId.SetPropertyIndexes(
                index: 3,
                originalValueIndex: 3,
                shadowIndex: -1,
                relationshipIndex: 1,
                storeGenerationIndex: 1);
            roleId.TypeMapping = StringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                keyComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    dbType: System.Data.DbType.String));
            roleId.SetCurrentValueComparer(new EntryCurrentValueComparer<string>(roleId));
            roleId.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
            roleId.AddAnnotation("Relational:ColumnName", "role_id");

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "pk_identity_role_claim_string");

            var index = runtimeEntityType.AddIndex(
                new[] { roleId });
            index.AddAnnotation("Relational:Name", "ix_identity_role_claim_string_role_id");

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("RoleId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            runtimeForeignKey.AddAnnotation("Relational:Name", "fk_identity_role_claim_string_asp_net_roles_identity_role_id");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            var id = runtimeEntityType.FindProperty("Id");
            var claimType = runtimeEntityType.FindProperty("ClaimType");
            var claimValue = runtimeEntityType.FindProperty("ClaimValue");
            var roleId = runtimeEntityType.FindProperty("RoleId");
            var key = runtimeEntityType.FindKey(new[] { id });
            key.SetPrincipalKeyValueFactory(KeyValueFactoryFactory.CreateSimpleNonNullableFactory<int>(key));
            key.SetIdentityMapFactory(IdentityMapFactoryFactory.CreateFactory<int>(key));
            runtimeEntityType.SetOriginalValuesFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((IdentityRoleClaim<string>)(source.Entity));
                    return ((ISnapshot)(new Snapshot<int, string, string, string>(((ValueComparer<int>)(((IProperty)id).GetValueComparer())).Snapshot(source.GetCurrentValue<int>(id)), (source.GetCurrentValue<string>(claimType) == null ? null : ((ValueComparer<string>)(((IProperty)claimType).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(claimType))), (source.GetCurrentValue<string>(claimValue) == null ? null : ((ValueComparer<string>)(((IProperty)claimValue).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(claimValue))), (source.GetCurrentValue<string>(roleId) == null ? null : ((ValueComparer<string>)(((IProperty)roleId).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(roleId))))));
                });
            runtimeEntityType.SetStoreGeneratedValuesFactory(
                ISnapshot () => ((ISnapshot)(new Snapshot<int, string>(((ValueComparer<int>)(((IProperty)id).GetValueComparer())).Snapshot(default(int)), (default(string) == null ? null : ((ValueComparer<string>)(((IProperty)roleId).GetValueComparer())).Snapshot(default(string)))))));
            runtimeEntityType.SetTemporaryValuesFactory(
                ISnapshot (InternalEntityEntry source) => ((ISnapshot)(new Snapshot<int, string>(default(int), default(string)))));
            runtimeEntityType.SetShadowValuesFactory(
                ISnapshot (IDictionary<string, object> source) => Snapshot.Empty);
            runtimeEntityType.SetEmptyShadowValuesFactory(
                ISnapshot () => Snapshot.Empty);
            runtimeEntityType.SetRelationshipSnapshotFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((IdentityRoleClaim<string>)(source.Entity));
                    return ((ISnapshot)(new Snapshot<int, string>(((ValueComparer<int>)(((IProperty)id).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<int>(id)), (source.GetCurrentValue<string>(roleId) == null ? null : ((ValueComparer<string>)(((IProperty)roleId).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<string>(roleId))))));
                });
            runtimeEntityType.Counts = new PropertyCounts(
                propertyCount: 4,
                navigationCount: 0,
                complexPropertyCount: 0,
                originalValueCount: 4,
                shadowCount: 0,
                relationshipCount: 2,
                storeGeneratedCount: 2);
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "asp_net_role_claims");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}