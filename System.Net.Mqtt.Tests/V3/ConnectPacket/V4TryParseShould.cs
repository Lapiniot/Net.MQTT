using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace System.Net.Mqtt.Tests.V3.ConnectPacket;

[TestClass]
public class V4TryParseShould
{
    [TestMethod]
    public void ReturnTrue_PacketNotNull_GivenValidSample()
    {
        var sequence = new ReadOnlySequence<byte>([0x10, 0x50, 0x00, 0x04, 0x4d, 0x51, 0x54, 0x54, 0x04, 0xf6, 0x00, 0x78, 0x00, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x00, 0x0d, 0x54, 0x65, 0x73, 0x74, 0x57, 0x69, 0x6c, 0x6c, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x00, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x57, 0x69, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x00, 0x08, 0x54, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x00, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64]);

        var actual = Packets.V3.ConnectPacket.TryRead(in sequence, out var packet, out var consumed);

        Assert.IsTrue(actual);
        Assert.IsNotNull(packet);
        Assert.AreEqual(82, consumed);
        Assert.IsTrue(packet.ProtocolName.Span.SequenceEqual("MQTT"u8));
        Assert.AreEqual(0x04, packet.ProtocolLevel);
        Assert.AreEqual(2, packet.WillQoS);
        Assert.IsTrue(packet.WillRetain);
        Assert.IsTrue(packet.CleanSession);
        Assert.AreEqual(120, packet.KeepAlive);
        Assert.IsTrue(packet.ClientId.Span.SequenceEqual("TestClientId"u8));
        Assert.IsTrue(packet.WillTopic.Span.SequenceEqual("TestWillTopic"u8));
        Assert.IsTrue(packet.WillMessage.Span.SequenceEqual("TestWillMessage"u8));
        Assert.IsTrue(packet.UserName.Span.SequenceEqual("TestUser"u8));
        Assert.IsTrue(packet.Password.Span.SequenceEqual("TestPassword"u8));
    }

    [TestMethod]
    public void ReturnTrue_PacketNotNull_GivenValidFragmentedSample()
    {
        var sequence = SequenceFactory.Create<byte>(
            new byte[] {
                0x10, 0x50, 0x00, 0x04, 0x4d, 0x51, 0x54, 0x54, 0x04, 0xf6, 0x00, 0x78, 0x00, 0x0c, 0x54, 0x65,
                0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x00, 0x0d, 0x54, 0x65, 0x73, 0x74 },
            new byte[] {
                0x57, 0x69, 0x6c, 0x6c, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x00, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x57,
                0x69, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x00, 0x08, 0x54, 0x65, 0x73, 0x74 },
            new byte[] {
                0x55, 0x73, 0x65, 0x72, 0x00, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64 });

        var actual = Packets.V3.ConnectPacket.TryRead(in sequence, out var packet, out var consumed);

        Assert.IsTrue(actual);
        Assert.IsNotNull(packet);
        Assert.AreEqual(82, consumed);
        Assert.IsTrue(packet.ProtocolName.Span.SequenceEqual("MQTT"u8));
        Assert.AreEqual(0x04, packet.ProtocolLevel);
        Assert.AreEqual(2, packet.WillQoS);
        Assert.IsTrue(packet.WillRetain);
        Assert.IsTrue(packet.CleanSession);
        Assert.AreEqual(120, packet.KeepAlive);
        Assert.IsTrue(packet.ClientId.Span.SequenceEqual("TestClientId"u8));
        Assert.IsTrue(packet.WillTopic.Span.SequenceEqual("TestWillTopic"u8));
        Assert.IsTrue(packet.WillMessage.Span.SequenceEqual("TestWillMessage"u8));
        Assert.IsTrue(packet.UserName.Span.SequenceEqual("TestUser"u8));
        Assert.IsTrue(packet.Password.Span.SequenceEqual("TestPassword"u8));
    }

    [TestMethod]
    public void ReturnTrue_PacketNotNull_WillTopicNull_GivenSampleWithoutWillMessage()
    {
        var sequence = new ReadOnlySequence<byte>([0x10, 0x30, 0x00, 0x04, 0x4d, 0x51, 0x54, 0x54, 0x04, 0xf2, 0x00, 0x78, 0x00, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x00, 0x08, 0x54, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x00, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64]);

        var actual = Packets.V3.ConnectPacket.TryRead(in sequence, out var packet, out var consumed);
        Assert.IsTrue(actual);
        Assert.IsNotNull(packet);
        Assert.AreEqual(50, consumed);
        Assert.IsTrue(packet.WillTopic.IsEmpty);
        Assert.AreEqual(0, packet.WillMessage.Length);
    }

    [TestMethod]
    public void ReturnTrue_PacketNotNull_ClientIdNull_GivenSampleWithoutClientId()
    {
        var sequence = new ReadOnlySequence<byte>([0x10, 0x44, 0x00, 0x04, 0x4d, 0x51, 0x54, 0x54, 0x04, 0xf6, 0x00, 0x78, 0x00, 0x00, 0x00, 0x0d, 0x54, 0x65, 0x73, 0x74, 0x57, 0x69, 0x6c, 0x6c, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x00, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x57, 0x69, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x00, 0x08, 0x54, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x00, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64]);
        var actual = Packets.V3.ConnectPacket.TryRead(in sequence, out var packet, out var consumed);

        Assert.IsTrue(actual);
        Assert.IsNotNull(packet);
        Assert.AreEqual(70, consumed);
        Assert.IsTrue(packet.ClientId.IsEmpty);
    }

    [TestMethod]
    public void ReturnTrue_PacketNotNull_UserNameNull_GivenSampleWithoutUserName()
    {
        var sequence = new ReadOnlySequence<byte>([0x10, 0x0c, 0x00, 0x04, 0x4d, 0x51, 0x54, 0x54, 0x04, 0x32, 0x00, 0x78, 0x00, 0x00]);

        var actual = Packets.V3.ConnectPacket.TryRead(in sequence, out var packet, out var consumed);

        Assert.IsTrue(actual);
        Assert.IsNotNull(packet);
        Assert.AreEqual(14, consumed);
        Assert.IsTrue(packet.UserName.IsEmpty);
    }

    [TestMethod]
    public void ReturnTrue_PacketNotNull_PasswordNull_GivenSampleWithoutPassword()
    {
        var sequence = new ReadOnlySequence<byte>([0x10, 0x16, 0x00, 0x04, 0x4d, 0x51, 0x54, 0x54, 0x04, 0xb2, 0x00, 0x78, 0x00, 0x00, 0x00, 0x08, 0x54, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72]);

        var actual = Packets.V3.ConnectPacket.TryRead(in sequence, out var packet, out var consumed);

        Assert.IsTrue(actual);
        Assert.IsNotNull(packet);
        Assert.AreEqual(24, consumed);
        Assert.IsTrue(packet.Password.IsEmpty);
    }

    [TestMethod]
    public void ReturnFalse_PacketNull_GivenInvalidTypeSample()
    {
        var sequence = new ReadOnlySequence<byte>([0x13, 0x50, 0x00, 0x04, 0x4d, 0x51, 0x54, 0x54, 0x04, 0xc6, 0x00, 0x78, 0x00, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x00, 0x0d, 0x54, 0x65, 0x73, 0x74, 0x57, 0x69, 0x6c, 0x6c, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x00, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x57, 0x69, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x00, 0x08, 0x54, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x00, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64]);

        var actual = Packets.V3.ConnectPacket.TryRead(in sequence, out var packet, out var consumed);

        Assert.IsFalse(actual);
        Assert.IsNull(packet);
        Assert.AreEqual(0, consumed);
    }

    [TestMethod]
    public void ReturnFalse_PacketNull_GivenInvalidTypeFragmentedSample()
    {
        var sequence = SequenceFactory.Create<byte>(
            new byte[] {
                0x13, 0x50, 0x00, 0x04, 0x4d, 0x51, 0x54, 0x54, 0x04, 0xf6, 0x00, 0x78, 0x00, 0x0c, 0x54, 0x65,
                0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x00, 0x0d, 0x54, 0x65, 0x73, 0x74 },
            new byte[] {
                0x57, 0x69, 0x6c, 0x6c, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x00, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x57,
                0x69, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x00, 0x08, 0x54, 0x65, 0x73, 0x74 },
            new byte[] {
                0x55, 0x73, 0x65, 0x72, 0x00, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64 });

        var actual = Packets.V3.ConnectPacket.TryRead(in sequence, out var packet, out var consumed);

        Assert.IsFalse(actual);
        Assert.IsNull(packet);
        Assert.AreEqual(0, consumed);
    }

    [TestMethod]
    public void ReturnFalse_PacketNull_GivenIncompleteSample()
    {
        var sequence = new ReadOnlySequence<byte>([0x10, 0x50, 0x00, 0x04, 0x4d, 0x51, 0x54, 0x54, 0x04, 0xc6, 0x00, 0x78, 0x00, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x00, 0x0d, 0x54, 0x65, 0x73, 0x74, 0x57, 0x69, 0x6c, 0x6c, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x00, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x57, 0x69, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61]);

        var actual = Packets.V3.ConnectPacket.TryRead(in sequence, out var packet, out var consumed);

        Assert.IsFalse(actual);
        Assert.IsNull(packet);
        Assert.AreEqual(0, consumed);
    }

    [TestMethod]
    public void ReturnFalse_PacketNull_GivenIncompleteFragmentedSample()
    {
        var sequence = SequenceFactory.Create<byte>(
            new byte[] {
                0x13, 0x50, 0x00, 0x04, 0x4d, 0x51, 0x54, 0x54, 0x04, 0xf6, 0x00, 0x78, 0x00, 0x0c, 0x54, 0x65,
                0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x00, 0x0d, 0x54, 0x65, 0x73, 0x74 },
            new byte[] {
                0x57, 0x69, 0x6c, 0x6c, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x00, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x57,
                0x69, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x00, 0x08, 0x54, 0x65, 0x73, 0x74 },
            new byte[] {
                0x55, 0x73, 0x65, 0x72, 0x00, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x50, 0x61, 0x73 });

        var actual = Packets.V3.ConnectPacket.TryRead(in sequence, out var packet, out var consumed);

        Assert.IsFalse(actual);
        Assert.IsNull(packet);
        Assert.AreEqual(0, consumed);
    }
}