using Microsoft.VisualStudio.TestTools.UnitTesting;
using static System.Net.Mqtt.Packets.V5.ConnectPacket;

namespace System.Net.Mqtt.Tests.V5.ConnectPacket;

[TestClass]
public class TryReadShould
{
    [TestMethod]
    public void ReturnTrue_PacketNotNull_GivenValidSample()
    {
        var sequence = new ReadOnlySequence<byte>([0x10, 0xA6, 0x02, 0x00, 0x04, 0x4d, 0x51, 0x54, 0x54, 0x05, 0xf6, 0x00, 0x3c, 0x69, 0x15, 0x00, 0x06, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x16, 0x00, 0x07, 0x7A, 0x78, 0x63, 0x2D, 0x31, 0x32, 0x33, 0x11, 0x00, 0x00, 0x01, 0x2c, 0x21, 0x04, 0x00, 0x27, 0x00, 0x00, 0x08, 0x00, 0x22, 0x02, 0x00, 0x19, 0x01, 0x17, 0x01, 0x26, 0x00, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x70, 0x2d, 0x31, 0x00, 0x11, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x70, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2d, 0x31, 0x26, 0x00, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x70, 0x2d, 0x32, 0x00, 0x11, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x70, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2d, 0x32, 0x00, 0x0e, 0x6d, 0x71, 0x74, 0x74, 0x78, 0x5f, 0x61, 0x64, 0x66, 0x62, 0x38, 0x35, 0x35, 0x37, 0x5F, 0x26, 0x00, 0x04, 0x41, 0x42, 0x43, 0x44, 0x00, 0x04, 0x45, 0x46, 0x47, 0x48, 0x26, 0x00, 0x03, 0x41, 0x42, 0x43, 0x00, 0x03, 0x45, 0x46, 0x47, 0x18, 0x00, 0x00, 0x00, 0x78, 0x01, 0x01, 0x02, 0x00, 0x00, 0x01, 0x2c, 0x03, 0x00, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x08, 0x00, 0x13, 0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x77, 0x69, 0x6c, 0x6c, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x09, 0x00, 0x15, 0x74, 0x65, 0x73, 0x74, 0x20, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x61, 0x74, 0x61, 0x00, 0x11, 0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x77, 0x69, 0x6c, 0x6c, 0x2f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x31, 0x00, 0x17, 0x4c, 0x61, 0x73, 0x74, 0x2d, 0x57, 0x69, 0x6c, 0x6c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x09, 0x6d, 0x71, 0x74, 0x74, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x00, 0x09, 0x6d, 0x71, 0x74, 0x74, 0x2d, 0x70, 0x61, 0x73, 0x73]);

        var actual = TryRead(in sequence, out var packet, out var consumed);

        Assert.IsTrue(actual);
        Assert.IsNotNull(packet);
        Assert.AreEqual(297, consumed);
        Assert.IsTrue(packet.CleanStart);
        Assert.AreEqual(60, packet.KeepAlive);
        Assert.IsTrue(packet.ClientId.Span.SequenceEqual("mqttx_adfb8557"u8));

        Assert.IsTrue(packet.WillRetain);
        Assert.AreEqual(2, packet.WillQoS);
        Assert.IsTrue(packet.WillTopic.Span.SequenceEqual("/last-will/topic1"u8));
        Assert.IsTrue(packet.WillPayload.Span.SequenceEqual("Last-Will and testament"u8));
        Assert.AreEqual(packet.WillDelayInterval, 120u);
        Assert.AreEqual(packet.WillExpiryInterval, 300u);
        Assert.AreEqual(packet.WillPayloadFormat, 1);
        Assert.IsTrue(packet.WillContentType.Span.SequenceEqual("text/plain"u8));
        Assert.IsTrue(packet.WillResponseTopic.Span.SequenceEqual("/last-will/response"u8));
        Assert.IsTrue(packet.WillCorrelationData.Span.SequenceEqual("test correlation data"u8));
        Assert.IsTrue(packet.WillProperties[0].Name.Span.SequenceEqual("ABCD"u8));
        Assert.IsTrue(packet.WillProperties[0].Value.Span.SequenceEqual("EFGH"u8));
        Assert.IsTrue(packet.WillProperties[1].Name.Span.SequenceEqual("ABC"u8));
        Assert.IsTrue(packet.WillProperties[1].Value.Span.SequenceEqual("EFG"u8));

        Assert.IsTrue(packet.UserName.Span.SequenceEqual("mqtt-user"u8));
        Assert.IsTrue(packet.Password.Span.SequenceEqual("mqtt-pass"u8));

        Assert.AreEqual(packet.SessionExpiryInterval, 300u);
        Assert.AreEqual(packet.ReceiveMaximum, 1024u);
        Assert.AreEqual(packet.TopicAliasMaximum, 512u);
        Assert.AreEqual(packet.MaximumPacketSize, 2048u);
        Assert.IsTrue(packet.RequestProblem);
        Assert.IsTrue(packet.RequestResponse);
        Assert.IsTrue(packet.AuthenticationMethod.Span.SequenceEqual("Bearer"u8));
        Assert.IsTrue(packet.AuthenticationData.Span.SequenceEqual("zxc-123"u8));

        Assert.IsTrue(packet.Properties[0].Name.Span.SequenceEqual("user-prop-1"u8));
        Assert.IsTrue(packet.Properties[0].Value.Span.SequenceEqual("user-prop-value-1"u8));
        Assert.IsTrue(packet.Properties[1].Name.Span.SequenceEqual("user-prop-2"u8));
        Assert.IsTrue(packet.Properties[1].Value.Span.SequenceEqual("user-prop-value-2"u8));
    }

    [TestMethod]
    public void ReturnTrue_PacketNotNull_GivenValidFragmentedSample()
    {
        var sequence = SequenceFactory.Create<byte>(
            new byte[] {
                0x10, 0xA6, 0x02, 0x00, 0x04, 0x4d, 0x51, 0x54, 0x54, 0x05, 0xf6, 0x00, 0x3c, 0x69,
                0x15, 0x00, 0x06, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x16, 0x00, 0x07, 0x7A, 0x78,
                0x63, 0x2D, 0x31, 0x32, 0x33, 0x11, 0x00, 0x00, 0x01, 0x2c, 0x21, 0x04, 0x00, 0x27,
                0x00, 0x00, 0x08, 0x00, 0x22, 0x02, 0x00, 0x19, 0x01, 0x17, 0x01, 0x26, 0x00, 0x0b,
                0x75, 0x73, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x70, 0x2d, 0x31, 0x00, 0x11, 0x75,
                0x73, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x70, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65,
                0x2d, 0x31, 0x26, 0x00, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x70,
                0x2d, 0x32, 0x00, 0x11, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x70, 0x2d,
                0x76, 0x61, 0x6c, 0x75, 0x65, 0x2d, 0x32, 0x00, 0x0e, 0x6d, 0x71, 0x74, 0x74, 0x78 },
            new byte[] {
                0x5f, 0x61, 0x64, 0x66, 0x62, 0x38, 0x35, 0x35, 0x37, 0x5F, 0x26, 0x00, 0x04, 0x41,
                0x42, 0x43, 0x44, 0x00, 0x04, 0x45, 0x46, 0x47, 0x48, 0x26, 0x00, 0x03, 0x41, 0x42,
                0x43, 0x00, 0x03, 0x45, 0x46, 0x47, 0x18, 0x00, 0x00, 0x00, 0x78, 0x01, 0x01, 0x02,
                0x00, 0x00, 0x01, 0x2c, 0x03, 0x00, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x70, 0x6c,
                0x61, 0x69, 0x6e, 0x08, 0x00, 0x13, 0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x77, 0x69,
                0x6c, 0x6c, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x09, 0x00, 0x15,
                0x74, 0x65, 0x73, 0x74, 0x20, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69 },
            new byte[] {
                0x6f, 0x6e, 0x20, 0x64, 0x61, 0x74, 0x61, 0x00, 0x11, 0x2f, 0x6c, 0x61, 0x73, 0x74,
                0x2d, 0x77, 0x69, 0x6c, 0x6c, 0x2f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x31, 0x00, 0x17,
                0x4c, 0x61, 0x73, 0x74, 0x2d, 0x57, 0x69, 0x6c, 0x6c, 0x20, 0x61, 0x6e, 0x64, 0x20,
                0x74, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x09, 0x6d, 0x71, 0x74,
                0x74, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x00, 0x09, 0x6d, 0x71, 0x74, 0x74, 0x2d, 0x70,
                0x61, 0x73, 0x73 });

        var actual = TryRead(in sequence, out var packet, out var consumed);

        Assert.IsTrue(actual);
        Assert.IsNotNull(packet);
        Assert.AreEqual(297, consumed);
        Assert.IsTrue(packet.CleanStart);
        Assert.AreEqual(60, packet.KeepAlive);
        Assert.IsTrue(packet.ClientId.Span.SequenceEqual("mqttx_adfb8557"u8));

        Assert.IsTrue(packet.WillRetain);
        Assert.AreEqual(2, packet.WillQoS);
        Assert.IsTrue(packet.WillTopic.Span.SequenceEqual("/last-will/topic1"u8));
        Assert.IsTrue(packet.WillPayload.Span.SequenceEqual("Last-Will and testament"u8));
        Assert.AreEqual(packet.WillDelayInterval, 120u);
        Assert.AreEqual(packet.WillExpiryInterval, 300u);
        Assert.AreEqual(packet.WillPayloadFormat, 1);
        Assert.IsTrue(packet.WillContentType.Span.SequenceEqual("text/plain"u8));
        Assert.IsTrue(packet.WillResponseTopic.Span.SequenceEqual("/last-will/response"u8));
        Assert.IsTrue(packet.WillCorrelationData.Span.SequenceEqual("test correlation data"u8));
        Assert.IsTrue(packet.WillProperties[0].Name.Span.SequenceEqual("ABCD"u8));
        Assert.IsTrue(packet.WillProperties[0].Value.Span.SequenceEqual("EFGH"u8));
        Assert.IsTrue(packet.WillProperties[1].Name.Span.SequenceEqual("ABC"u8));
        Assert.IsTrue(packet.WillProperties[1].Value.Span.SequenceEqual("EFG"u8));

        Assert.IsTrue(packet.UserName.Span.SequenceEqual("mqtt-user"u8));
        Assert.IsTrue(packet.Password.Span.SequenceEqual("mqtt-pass"u8));

        Assert.AreEqual(packet.SessionExpiryInterval, 300u);
        Assert.AreEqual(packet.ReceiveMaximum, 1024u);
        Assert.AreEqual(packet.TopicAliasMaximum, 512u);
        Assert.AreEqual(packet.MaximumPacketSize, 2048u);
        Assert.IsTrue(packet.RequestProblem);
        Assert.IsTrue(packet.RequestResponse);
        Assert.IsTrue(packet.AuthenticationMethod.Span.SequenceEqual("Bearer"u8));
        Assert.IsTrue(packet.AuthenticationData.Span.SequenceEqual("zxc-123"u8));

        Assert.IsTrue(packet.Properties[0].Name.Span.SequenceEqual("user-prop-1"u8));
        Assert.IsTrue(packet.Properties[0].Value.Span.SequenceEqual("user-prop-value-1"u8));
        Assert.IsTrue(packet.Properties[1].Name.Span.SequenceEqual("user-prop-2"u8));
        Assert.IsTrue(packet.Properties[1].Value.Span.SequenceEqual("user-prop-value-2"u8));
    }

    [TestMethod]
    public void ReturnTrue_PacketNotNull_WillTopicEmpty_GivenSampleWithoutWillMessage()
    {
        var sequence = new ReadOnlySequence<byte>([0x10, 0x87, 0x01, 0x00, 0x04, 0x4d, 0x51, 0x54, 0x54, 0x05, 0xc2, 0x00, 0x3c, 0x56, 0x11, 0x00, 0x00, 0x01, 0x2c, 0x21, 0x04, 0x00, 0x27, 0x00, 0x00, 0x08, 0x00, 0x22, 0x02, 0x00, 0x19, 0x01, 0x17, 0x01, 0x26, 0x00, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x70, 0x2d, 0x31, 0x00, 0x11, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x70, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2d, 0x31, 0x26, 0x00, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x70, 0x2d, 0x32, 0x00, 0x11, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x70, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2d, 0x32, 0x00, 0x0e, 0x6d, 0x71, 0x74, 0x74, 0x78, 0x5f, 0x61, 0x64, 0x66, 0x62, 0x38, 0x35, 0x35, 0x37, 0x00, 0x09, 0x6d, 0x71, 0x74, 0x74, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x00, 0x09, 0x6d, 0x71, 0x74, 0x74, 0x2d, 0x70, 0x61, 0x73, 0x73]);

        var actual = TryRead(in sequence, out var packet, out var consumed);

        Assert.IsTrue(actual);
        Assert.IsNotNull(packet);
        Assert.AreEqual(138, consumed);
        Assert.IsTrue(packet.WillTopic.IsEmpty);
        Assert.AreEqual(0, packet.WillPayload.Length);
    }

    [TestMethod]
    public void ReturnTrue_PacketNotNull_ClientIdEmpty_GivenSampleWithoutClientId()
    {
        var sequence = new ReadOnlySequence<byte>([0x10, 0x79, 0x00, 0x04, 0x4d, 0x51, 0x54, 0x54, 0x05, 0xc2, 0x00, 0x3c, 0x56, 0x11, 0x00, 0x00, 0x01, 0x2c, 0x21, 0x04, 0x00, 0x27, 0x00, 0x00, 0x08, 0x00, 0x22, 0x02, 0x00, 0x19, 0x01, 0x17, 0x01, 0x26, 0x00, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x70, 0x2d, 0x31, 0x00, 0x11, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x70, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2d, 0x31, 0x26, 0x00, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x70, 0x2d, 0x32, 0x00, 0x11, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x70, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2d, 0x32, 0x00, 0x00, 0x00, 0x09, 0x6d, 0x71, 0x74, 0x74, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x00, 0x09, 0x6d, 0x71, 0x74, 0x74, 0x2d, 0x70, 0x61, 0x73, 0x73]);

        var actual = TryRead(in sequence, out var packet, out var consumed);

        Assert.IsTrue(actual);
        Assert.IsNotNull(packet);
        Assert.AreEqual(123, consumed);
        Assert.IsTrue(packet.ClientId.IsEmpty);
    }

    [TestMethod]
    public void ReturnTrue_PacketNotNull_UserNameEmpty_GivenSampleWithoutUserName()
    {
        var sequence = new ReadOnlySequence<byte>([0x10, 0x21, 0x00, 0x04, 0x4d, 0x51, 0x54, 0x54, 0x05, 0x82, 0x00, 0x3c, 0x04, 0x19, 0x00, 0x17, 0x00, 0x00, 0x0e, 0x6d, 0x71, 0x74, 0x74, 0x78, 0x5f, 0x61, 0x64, 0x66, 0x62, 0x38, 0x35, 0x35, 0x37, 0x00, 0x00]);

        var actual = TryRead(in sequence, out var packet, out var consumed);

        Assert.IsTrue(actual);
        Assert.IsNotNull(packet);
        Assert.AreEqual(35, consumed);
        Assert.IsTrue(packet.UserName.IsEmpty);
    }

    [TestMethod]
    public void ReturnTrue_PacketNotNull_DefaultPropertyValues_GivenSampleWithNoProperties()
    {
        var sequence = new ReadOnlySequence<byte>([0x10, 0x1D, 0x00, 0x04, 0x4d, 0x51, 0x54, 0x54, 0x05, 0x82, 0x00, 0x3c, 0x00, 0x00, 0x0e, 0x6d, 0x71, 0x74, 0x74, 0x78, 0x5f, 0x61, 0x64, 0x66, 0x62, 0x38, 0x35, 0x35, 0x37, 0x00, 0x00]);

        var actual = TryRead(in sequence, out var packet, out var consumed);

        Assert.IsTrue(actual);
        Assert.IsNotNull(packet);
        Assert.AreEqual(31, consumed);
        Assert.AreEqual(0u, packet.SessionExpiryInterval);
        Assert.AreEqual(ushort.MaxValue, packet.ReceiveMaximum);
        Assert.AreEqual(null, packet.MaximumPacketSize);
        Assert.AreEqual(0, packet.TopicAliasMaximum);
        Assert.AreEqual(false, packet.RequestResponse);
        Assert.AreEqual(true, packet.RequestProblem);
        Assert.AreEqual(null, packet.Properties);
        Assert.AreEqual(ReadOnlyMemory<byte>.Empty, packet.AuthenticationMethod);
        Assert.AreEqual(ReadOnlyMemory<byte>.Empty, packet.AuthenticationData);
        Assert.AreEqual(0u, packet.WillDelayInterval);
        Assert.AreEqual(0u, packet.WillPayloadFormat);
        Assert.AreEqual(null, packet.WillExpiryInterval);
        Assert.AreEqual(ReadOnlyMemory<byte>.Empty, packet.WillContentType);
        Assert.AreEqual(ReadOnlyMemory<byte>.Empty, packet.WillResponseTopic);
        Assert.AreEqual(ReadOnlyMemory<byte>.Empty, packet.WillCorrelationData);
        Assert.AreEqual(null, packet.WillProperties);
    }

    [TestMethod]
    public void ReturnTrue_PacketNotNull_DefaultPropertyValues_GivenFragmentedSampleWithNoProperties()
    {
        var sequence = SequenceFactory.Create<byte>(
            new byte[] {
                0x10, 0x1D, 0x00, 0x04, 0x4d, 0x51, 0x54, 0x54, 0x05, 0x82, 0x00,
                0x3c, 0x00, 0x00, 0x0e, 0x6d, 0x71, 0x74, 0x74, 0x78, 0x5f, 0x61 },
            new byte[] {
                0x64, 0x66, 0x62, 0x38, 0x35, 0x35, 0x37, 0x00, 0x00 });

        var actual = TryRead(in sequence, out var packet, out var consumed);

        Assert.IsTrue(actual);
        Assert.IsNotNull(packet);
        Assert.AreEqual(31, consumed);
        Assert.AreEqual(0u, packet.SessionExpiryInterval);
        Assert.AreEqual(ushort.MaxValue, packet.ReceiveMaximum);
        Assert.AreEqual(null, packet.MaximumPacketSize);
        Assert.AreEqual(0, packet.TopicAliasMaximum);
        Assert.AreEqual(false, packet.RequestResponse);
        Assert.AreEqual(true, packet.RequestProblem);
        Assert.AreEqual(null, packet.Properties);
        Assert.AreEqual(ReadOnlyMemory<byte>.Empty, packet.AuthenticationMethod);
        Assert.AreEqual(ReadOnlyMemory<byte>.Empty, packet.AuthenticationData);
        Assert.AreEqual(0u, packet.WillDelayInterval);
        Assert.AreEqual(0u, packet.WillPayloadFormat);
        Assert.AreEqual(null, packet.WillExpiryInterval);
        Assert.AreEqual(ReadOnlyMemory<byte>.Empty, packet.WillContentType);
        Assert.AreEqual(ReadOnlyMemory<byte>.Empty, packet.WillResponseTopic);
        Assert.AreEqual(ReadOnlyMemory<byte>.Empty, packet.WillCorrelationData);
        Assert.AreEqual(null, packet.WillProperties);
    }

    [TestMethod]
    public void ReturnTrue_PacketNotNull_PasswordEmpty_GivenSampleWithoutPassword()
    {
        var sequence = new ReadOnlySequence<byte>([0x10, 0x2a, 0x00, 0x04, 0x4d, 0x51, 0x54, 0x54, 0x05, 0x82, 0x00, 0x3c, 0x04, 0x19, 0x00, 0x17, 0x00, 0x00, 0x0e, 0x6d, 0x71, 0x74, 0x74, 0x78, 0x5f, 0x61, 0x64, 0x66, 0x62, 0x38, 0x35, 0x35, 0x37, 0x00, 0x09, 0x6d, 0x71, 0x74, 0x74, 0x2d, 0x75, 0x73, 0x65, 0x72]);

        var actual = TryRead(in sequence, out var packet, out var consumed);

        Assert.IsTrue(actual);
        Assert.IsNotNull(packet);
        Assert.AreEqual(44, consumed);
        Assert.IsTrue(packet.Password.IsEmpty);
    }

    [TestMethod]
    public void ReturnFalse_PacketNull_GivenInvalidTypeSample()
    {
        var sequence = new ReadOnlySequence<byte>([0x12, 0xf8, 0x01, 0x00, 0x04, 0x4d, 0x51, 0x54, 0x54, 0x05, 0xf6, 0x00, 0x3c, 0x56, 0x11, 0x00, 0x00, 0x01, 0x2c, 0x21, 0x04, 0x00, 0x27, 0x00, 0x00, 0x08, 0x00, 0x22, 0x02, 0x00, 0x19, 0x01, 0x17, 0x01, 0x26, 0x00, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x70, 0x2d, 0x31, 0x00, 0x11, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x70, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2d, 0x31, 0x26, 0x00, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x70, 0x2d, 0x32, 0x00, 0x11, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x70, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2d, 0x32, 0x00, 0x0e, 0x6d, 0x71, 0x74, 0x74, 0x78, 0x5f, 0x61, 0x64, 0x66, 0x62, 0x38, 0x35, 0x35, 0x37, 0x44, 0x18, 0x00, 0x00, 0x00, 0x78, 0x01, 0x01, 0x02, 0x00, 0x00, 0x01, 0x2c, 0x03, 0x00, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x08, 0x00, 0x15, 0x2f, 0x77, 0x69, 0x6c, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x31, 0x09, 0x00, 0x10, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x00, 0x11, 0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x77, 0x69, 0x6c, 0x6c, 0x2f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x31, 0x00, 0x17, 0x4c, 0x61, 0x73, 0x74, 0x2d, 0x57, 0x69, 0x6c, 0x6c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x09, 0x6d, 0x71, 0x74, 0x74, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x00, 0x09, 0x6d, 0x71, 0x74, 0x74, 0x2d, 0x70, 0x61, 0x73, 0x73]);

        var actual = TryRead(in sequence, out var packet, out var consumed);

        Assert.IsFalse(actual);
        Assert.IsNull(packet);
        Assert.AreEqual(0, consumed);
    }

    [TestMethod]
    public void ReturnFalse_PacketNull_GivenInvalidTypeFragmentedSample()
    {
        var sequence = SequenceFactory.Create<byte>(
            new byte[] {
                0x12, 0xf8, 0x01, 0x00, 0x04, 0x4d, 0x51, 0x54, 0x54, 0x05, 0xf6, 0x00, 0x3c, 0x56, 0x11, 0x00, 0x00, 0x01, 0x2c, 0x21, 0x04,
                0x00, 0x27, 0x00, 0x00, 0x08, 0x00, 0x22, 0x02, 0x00, 0x19, 0x01, 0x17, 0x01, 0x26, 0x00, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x2d,
                0x70, 0x72, 0x6f, 0x70, 0x2d, 0x31, 0x00, 0x11, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x70, 0x2d, 0x76, 0x61, 0x6c,
                0x75, 0x65, 0x2d, 0x31, 0x26, 0x00, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x70, 0x2d, 0x32, 0x00, 0x11, 0x75,
                0x73, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x70, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2d, 0x32, 0x00, 0x0e, 0x6d, 0x71, 0x74, },
            new byte[] {
                0x74, 0x78, 0x5f, 0x61, 0x64, 0x66, 0x62, 0x38, 0x35, 0x35, 0x37, 0x44, 0x18, 0x00, 0x00, 0x00, 0x78, 0x01, 0x01, 0x02, 0x00,
                0x00, 0x01, 0x2c, 0x03, 0x00, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x08, 0x00, 0x15, 0x2f, 0x77,
                0x69, 0x6c, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x31, 0x09, 0x00,
                0x10, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x00, 0x11, 0x2f, 0x6c },
            new byte[] {
                0x61, 0x73, 0x74, 0x2d, 0x77, 0x69, 0x6c, 0x6c, 0x2f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x31, 0x00, 0x17, 0x4c, 0x61, 0x73, 0x74,
                0x2d, 0x57, 0x69, 0x6c, 0x6c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x09,
                0x6d, 0x71, 0x74, 0x74, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x00, 0x09, 0x6d, 0x71, 0x74, 0x74, 0x2d, 0x70, 0x61, 0x73, 0x73 });

        var actual = TryRead(in sequence, out var packet, out var consumed);

        Assert.IsFalse(actual);
        Assert.IsNull(packet);
        Assert.AreEqual(0, consumed);
    }

    [TestMethod]
    public void ReturnFalse_PacketNull_GivenIncompleteSample()
    {
        var sequence = new ReadOnlySequence<byte>([0x12, 0xf8, 0x01, 0x00, 0x04, 0x4d, 0x51, 0x54, 0x54, 0x05, 0xf6, 0x00, 0x3c, 0x56, 0x11, 0x00, 0x00, 0x01, 0x2c, 0x21, 0x04, 0x00, 0x27, 0x00, 0x00, 0x08, 0x00, 0x22, 0x02, 0x00, 0x19, 0x01, 0x17, 0x01, 0x26, 0x00, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x70, 0x2d, 0x31, 0x00, 0x11, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x70, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2d, 0x31, 0x26, 0x00, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x70, 0x2d, 0x32, 0x00, 0x11, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x70, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2d, 0x32, 0x00, 0x0e, 0x6d, 0x71, 0x74, 0x74, 0x78, 0x5f, 0x61, 0x64, 0x66, 0x62, 0x38, 0x35, 0x35, 0x37, 0x44, 0x18, 0x00, 0x00, 0x00, 0x78, 0x01, 0x01, 0x02, 0x00, 0x00, 0x01, 0x2c, 0x03, 0x00, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x08, 0x00, 0x15, 0x2f, 0x77, 0x69, 0x6c, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x31, 0x09, 0x00, 0x10, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x00, 0x11, 0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x77, 0x69, 0x6c, 0x6c, 0x2f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x31, 0x00, 0x17, 0x4c, 0x61, 0x73, 0x74, 0x2d, 0x57, 0x69, 0x6c, 0x6c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x09, 0x6d, 0x71, 0x74, 0x74, 0x2d, 0x75, 0x73, 0x65]);

        var actual = TryRead(in sequence, out var packet, out var consumed);

        Assert.IsFalse(actual);
        Assert.IsNull(packet);
        Assert.AreEqual(0, consumed);
    }

    [TestMethod]
    public void ReturnFalse_PacketNull_GivenIncompleteFragmentedSample()
    {
        var sequence = SequenceFactory.Create<byte>(
            new byte[] {
                0x12, 0xf8, 0x01, 0x00, 0x04, 0x4d, 0x51, 0x54, 0x54, 0x05, 0xf6, 0x00, 0x3c, 0x56, 0x11, 0x00, 0x00, 0x01, 0x2c, 0x21, 0x04,
                0x00, 0x27, 0x00, 0x00, 0x08, 0x00, 0x22, 0x02, 0x00, 0x19, 0x01, 0x17, 0x01, 0x26, 0x00, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x2d,
                0x70, 0x72, 0x6f, 0x70, 0x2d, 0x31, 0x00, 0x11, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x70, 0x2d, 0x76, 0x61, 0x6c,
                0x75, 0x65, 0x2d, 0x31, 0x26, 0x00, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x70, 0x2d, 0x32, 0x00, 0x11, 0x75,
                0x73, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x70, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2d, 0x32, 0x00, 0x0e, 0x6d, 0x71, 0x74, },
            new byte[] {
                0x74, 0x78, 0x5f, 0x61, 0x64, 0x66, 0x62, 0x38, 0x35, 0x35, 0x37, 0x44, 0x18, 0x00, 0x00, 0x00, 0x78, 0x01, 0x01, 0x02, 0x00,
                0x00, 0x01, 0x2c, 0x03, 0x00, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x08, 0x00, 0x15, 0x2f, 0x77,
                0x69, 0x6c, 0x6c, 0x2d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x31, 0x09, 0x00,
                0x10, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x00, 0x11, 0x2f, 0x6c },
            new byte[] {
                0x61, 0x73, 0x74, 0x2d, 0x77, 0x69, 0x6c, 0x6c, 0x2f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x31, 0x00, 0x17, 0x4c, 0x61, 0x73, 0x74,
                0x2d, 0x57, 0x69, 0x6c, 0x6c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x09,
                0x6d, 0x71, 0x74, 0x74, 0x2d, 0x75, 0x73});

        var actual = TryRead(in sequence, out var packet, out var consumed);

        Assert.IsFalse(actual);
        Assert.IsNull(packet);
        Assert.AreEqual(0, consumed);
    }
}