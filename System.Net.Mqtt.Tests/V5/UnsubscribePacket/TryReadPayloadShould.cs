using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace System.Net.Mqtt.Tests.V5.UnsubscribePacket;

[TestClass]
public class TryReadPayloadShould
{
    [TestMethod]
    public void ReturnTrue_IdAndFiltersOutParams_GivenValidSample()
    {
        var sequence = new ReadOnlySequence<byte>([0xa2, 0x4D, 0xcc, 0xb7, 0x20, 0x26, 0x00, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x31, 0x00, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x26, 0x00, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x32, 0x00, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x00, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x30, 0x2f, 0x23, 0x00, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x31, 0x2f, 0x23, 0x00, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x32, 0x2f, 0x23]);

        var actual = Packets.V5.UnsubscribePacket.TryReadPayload(sequence.Slice(2), 77, out var id, out var props, out var filters);

        Assert.IsTrue(actual);
        Assert.AreEqual(0xccb7, id);
        Assert.AreEqual(3, filters.Count);
        Assert.IsTrue(filters[0].AsSpan().SequenceEqual("testtopic0/#"u8));
        Assert.IsTrue(filters[1].AsSpan().SequenceEqual("testtopic1/#"u8));
        Assert.IsTrue(filters[2].AsSpan().SequenceEqual("testtopic2/#"u8));
        Assert.AreEqual(2, props.Count);
        Assert.IsTrue(props[0].Name.Span.SequenceEqual("prop1"u8));
        Assert.IsTrue(props[0].Value.Span.SequenceEqual("value1"u8));
        Assert.IsTrue(props[1].Name.Span.SequenceEqual("prop2"u8));
        Assert.IsTrue(props[1].Value.Span.SequenceEqual("value2"u8));
    }

    [TestMethod]
    public void ReturnTrue_IdAndFiltersOutParams_GivenValidFragmentedSample()
    {
        var sequence = SequenceFactory.Create<byte>(
            new byte[] {
                0xa2, 0x4D, 0xcc, 0xb7, 0x20, 0x26, 0x00, 0x05, 0x70, 0x72, 0x6f, 0x70,
                0x31, 0x00, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x26, 0x00, 0x05 },
            new byte[] {
                0x70, 0x72, 0x6f, 0x70, 0x32, 0x00, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
                0x32, 0x00, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x74, 0x6f, 0x70, 0x69, 0x63 },
            new byte[] {
                0x30, 0x2f, 0x23, 0x00, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x74, 0x6f, 0x70,
                0x69, 0x63, 0x31, 0x2f, 0x23, 0x00, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x74,
                0x6f, 0x70, 0x69, 0x63, 0x32, 0x2f, 0x23 });

        var actual = Packets.V5.UnsubscribePacket.TryReadPayload(sequence.Slice(2), 77, out var id, out var props, out var filters);

        Assert.IsTrue(actual);
        Assert.AreEqual(0xccb7, id);
        Assert.AreEqual(3, filters.Count);
        Assert.IsTrue(filters[0].AsSpan().SequenceEqual("testtopic0/#"u8));
        Assert.IsTrue(filters[1].AsSpan().SequenceEqual("testtopic1/#"u8));
        Assert.IsTrue(filters[2].AsSpan().SequenceEqual("testtopic2/#"u8));
        Assert.AreEqual(2, props.Count);
        Assert.IsTrue(props[0].Name.Span.SequenceEqual("prop1"u8));
        Assert.IsTrue(props[0].Value.Span.SequenceEqual("value1"u8));
        Assert.IsTrue(props[1].Name.Span.SequenceEqual("prop2"u8));
        Assert.IsTrue(props[1].Value.Span.SequenceEqual("value2"u8));
    }

    [TestMethod]
    public void ReturnTrue_IdAndFiltersOutParams_GivenValidLargerBufferSample()
    {
        var sequence = new ReadOnlySequence<byte>([0xa2, 0x4D, 0xcc, 0xb7, 0x20, 0x26, 0x00, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x31, 0x00, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x26, 0x00, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x32, 0x00, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x00, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x30, 0x2f, 0x23, 0x00, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x31, 0x2f, 0x23, 0x00, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x32, 0x2f, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00]);

        var actual = Packets.V5.UnsubscribePacket.TryReadPayload(sequence.Slice(2), 77, out var id, out var props, out var filters);

        Assert.IsTrue(actual);
        Assert.AreEqual(0xccb7, id);
        Assert.AreEqual(3, filters.Count);
        Assert.IsTrue(filters[0].AsSpan().SequenceEqual("testtopic0/#"u8));
        Assert.IsTrue(filters[1].AsSpan().SequenceEqual("testtopic1/#"u8));
        Assert.IsTrue(filters[2].AsSpan().SequenceEqual("testtopic2/#"u8));
        Assert.AreEqual(2, props.Count);
        Assert.IsTrue(props[0].Name.Span.SequenceEqual("prop1"u8));
        Assert.IsTrue(props[0].Value.Span.SequenceEqual("value1"u8));
        Assert.IsTrue(props[1].Name.Span.SequenceEqual("prop2"u8));
        Assert.IsTrue(props[1].Value.Span.SequenceEqual("value2"u8));
    }

    [TestMethod]
    public void ReturnTrue_IdAndFiltersOutParams_GivenValidLargerBufferFragmentedSample()
    {
        var sequence = SequenceFactory.Create<byte>(
            new byte[] {
                0xa2, 0x4D, 0xcc, 0xb7, 0x20, 0x26, 0x00, 0x05, 0x70, 0x72, 0x6f, 0x70,
                0x31, 0x00, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x26, 0x00, 0x05 },
            new byte[] {
                0x70, 0x72, 0x6f, 0x70, 0x32, 0x00, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
                0x32, 0x00, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x74, 0x6f, 0x70, 0x69, 0x63 },
            new byte[] {
                0x30, 0x2f, 0x23, 0x00, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x74, 0x6f, 0x70,
                0x69, 0x63, 0x31, 0x2f, 0x23, 0x00, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x74,
                0x6f, 0x70, 0x69, 0x63, 0x32, 0x2f, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00 });

        var actual = Packets.V5.UnsubscribePacket.TryReadPayload(sequence.Slice(2), 77, out var id, out var props, out var filters);

        Assert.IsTrue(actual);
        Assert.AreEqual(0xccb7, id);
        Assert.AreEqual(3, filters.Count);
        Assert.IsTrue(filters[0].AsSpan().SequenceEqual("testtopic0/#"u8));
        Assert.IsTrue(filters[1].AsSpan().SequenceEqual("testtopic1/#"u8));
        Assert.IsTrue(filters[2].AsSpan().SequenceEqual("testtopic2/#"u8));
        Assert.AreEqual(2, props.Count);
        Assert.IsTrue(props[0].Name.Span.SequenceEqual("prop1"u8));
        Assert.IsTrue(props[0].Value.Span.SequenceEqual("value1"u8));
        Assert.IsTrue(props[1].Name.Span.SequenceEqual("prop2"u8));
        Assert.IsTrue(props[1].Value.Span.SequenceEqual("value2"u8));
    }

    [TestMethod]
    public void ReturnFalse_IdAndFiltersUninitialized_GivenIncompleteSample()
    {
        var sequence = new ReadOnlySequence<byte>([0xa2, 0x4D, 0xcc, 0xb7, 0x20, 0x26, 0x00, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x31, 0x00, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x26, 0x00, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x32, 0x00, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x00, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x74, 0x6f, 0x70, 0x69, 0x63]);

        var actual = Packets.V5.UnsubscribePacket.TryReadPayload(sequence.Slice(2), 77, out var id, out var props, out var filters);

        Assert.IsFalse(actual);
        Assert.AreEqual(0, id);
        Assert.IsNull(filters);
        Assert.IsNull(props);
    }

    [TestMethod]
    public void ReturnFalse_IdAndFiltersUninitialized_GivenIncompleteFragmentedSample()
    {
        var sequence = SequenceFactory.Create<byte>(
            new byte[] {
                0xa2, 0x4D, 0xcc, 0xb7, 0x20, 0x26, 0x00, 0x05, 0x70, 0x72, 0x6f, 0x70,
                0x31, 0x00, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x26, 0x00, 0x05 },
            new byte[] {
                0x70, 0x72, 0x6f, 0x70, 0x32, 0x00, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
                0x32, 0x00, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x74, 0x6f, 0x70, 0x69, 0x63 },
            new byte[] {
                0x30, 0x2f, 0x23, 0x00, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x74, 0x6f, 0x70,
                0x69, 0x63, 0x31, 0x2f, 0x23, 0x00, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x74 });

        var actual = Packets.V5.UnsubscribePacket.TryReadPayload(sequence.Slice(2), 77, out var id, out var props, out var filters);

        Assert.IsFalse(actual);
        Assert.AreEqual(0, id);
        Assert.IsNull(filters);
        Assert.IsNull(props);
    }

    [TestMethod]
    public void ReturnFalse_IdAndFiltersUninitialized_GivenEmptySample()
    {
        var actual = Packets.V5.UnsubscribePacket.TryReadPayload(ReadOnlySequence<byte>.Empty, 23, out var id, out var props, out var filters);

        Assert.IsFalse(actual);
        Assert.AreEqual(0, id);
        Assert.IsNull(filters);
        Assert.IsNull(props);
    }
}