@page "/"
@using System.Numerics
@inject IOptions<UIOptions> Options
@inject MqttServerMetricsCollector Metrics
@inherits PeriodicRefreshComponent
@rendermode InteractiveServer

<StandardCounters @ref="@countersRef" />

@if (Metrics is { Connections.Enabled: true } or { ActiveConnections.Enabled: true } or
    { RejectedConnections.Enabled: true })
{
    <h6>Connections</h6>
    <div class="grid-auto mb-4">
    @RenderCardC("Total", Metrics.Connections)
    @RenderCardC("Active", Metrics.ActiveConnections)
    @RenderCardC("Rejected", Metrics.RejectedConnections)
</div>
}

@if (Metrics is { Sessions.Enabled: true } or { ActiveSessions.Enabled: true })
{
    <h6>Sessions</h6>
    <div class="grid-auto mb-4">
    @RenderCardC("Total", Metrics.Sessions)
    @RenderCardC("Active", Metrics.ActiveSessions)
</div>
}

@if (Metrics is { BytesReceived.Enabled: true } or { BytesSent.Enabled: true } or
    { PacketsReceived.Enabled: true } or { PacketsSent.Enabled: true })
{
    <h6>Data exchange</h6>
    <div class="grid-auto mb-4">
    @RenderCardS("Bytes received", Metrics.BytesReceived)
    @RenderCardS("Bytes sent", Metrics.BytesSent)
    @RenderCardC("Packets received", Metrics.PacketsReceived)
    @RenderCardC("Packets sent", Metrics.PacketsSent)
</div>
}

@if (Metrics is { ActiveSubscriptions: { Enabled: true } })
{
    <h6>Susbscriptions</h6>
    <div class="grid-auto">
    @RenderCardC("Active", Metrics.ActiveSubscriptions)
</div>
}

@code {
    static RenderFragment noop = (b) => { };
    private static string[] suffixes = { "", "KB", "MB", "GB", "TB" };
    private StandardCounters? countersRef;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        AutoRefreshInterval = (int)Math.Ceiling(Options.Value.AutoRefreshInterval.TotalSeconds);
    }

    protected override void OnRefreshTick()
    {
        base.OnRefreshTick();
        countersRef?.ForceRefresh();
    }

    private string FormatSize<T>(T bytes) where T : struct, IBinaryInteger<T>, IConvertible
    {
        var p = int.Min((T.Log2(bytes) / T.CreateChecked(10)).ToInt32(null), 4);
        if (p == 0) return $"{bytes} B";
        var n = bytes.ToDouble(null) / (1 << (10 * p));
        return $"{n:N2} {suffixes[p]}";
    }

    private RenderFragment RenderCardC<T>(string header, MetricRecord<T>? record)
        where T : struct, INumber<T> =>
        record is { Enabled: true, Value: var value, Name: var name, Description: var description }
        ? @<div class="border p-2 rounded-2 bg-success-subtle text-truncate" title="@($"{description}\n{name}")">
        <h6>@(header)</h6>
        @(value.ToString("N0", null))
    </div>
    : noop;

    private RenderFragment RenderCardS<T>(string header, MetricRecord<T>? record)
        where T : struct, IBinaryInteger<T>, IConvertible =>
        record is { Enabled: true, Value: var value, Name: var name, Description: var description }
        ? @<div class="border p-2 rounded-2 bg-success-subtle text-truncate" title="@($"{description}\n{name}")">
        <h6>@header</h6>
        @FormatSize(value)
    </div>
    : noop;
}