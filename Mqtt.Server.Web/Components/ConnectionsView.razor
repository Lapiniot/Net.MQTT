@using OOs.Threading
@using System.Diagnostics.CodeAnalysis
@inject IMqttServer Server
@inject IOptions<UIOptions> Options
@inject ILogger<ConnectionsView> Logger
@implements IDisposable
@implements IObserver<ConnectionStateChangedMessage>

@if (provider is null)
{
    <h6 class="text-body-secondary">Server doesn't provide connections info.</h6>
    return;
}

<div class="d-inline-flex align-items-center mb-3">
    Items per page:
    <select class="form-select form-select-sm w-auto ms-2" @bind="pagination.ItemsPerPage">
        <option>10</option>
        <option>20</option>
        <option>50</option>
        <option>100</option>
    </select>
</div>

<div class="table-responsive border mb-3">
    <QuickGrid Items="connections" Pagination="pagination" Class="table table-striped table-hover table-borderless m-0" Theme="bare">
        <TemplateColumn Title="Client Id" Sortable="true">
            <div class="d-flex">
                @context.ClientId
                @if (connManager is not null)
                {
                    <button class="btn btn-sm text-danger ms-auto p-0 m-0" title="Force client disconnect"
                        onclick="@(() => connManager.Abort(context.ClientId))">
                        <svg height=" 20px" viewBox="0 0 24 24" width="20px">
                            <path d="M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm4.3 14.3c-.39.39-1.02.39-1.41 0L12 13.41 9.11 16.3c-.39.39-1.02.39-1.41 0-.39-.39-.39-1.02 0-1.41L10.59 12 7.7 9.11c-.39-.39-.39-1.02 0-1.41.39-.39 1.02-.39 1.41 0L12 10.59l2.89-2.89c.39-.39 1.02-.39 1.41 0 .39.39.39 1.02 0 1.41L13.41 12l2.89 2.89c.38.38.38 1.02 0 1.41z" />
                        </svg>
                    </button>
                }
            </div>
        </TemplateColumn>
        <PropertyColumn Property="@(p => p.Id)" Title="Conn. Id" Sortable="true" />
        <PropertyColumn Property="@(p => p.LocalEndPoint.ToString())" Title="Local Endpoint" Sortable="true" />
        <PropertyColumn Property="@(p => p.RemoteEndPoint.ToString())" Title="Remote Endpoint" Sortable="true" />
        <PropertyColumn Property="@(p => p.Created)" Title="Connected at" Format="u" Sortable="true" />
    </QuickGrid>
</div>

<div class="d-flex align-items-center">
    <span><strong>@(pagination.TotalItemCount.GetValueOrDefault())</strong> active connections</span>
    @if (pagination.TotalItemCount is { } && pagination.LastPageIndex > 0)
    {
        <Pagination State="pagination" Class="ms-auto" />
    }
</div>

@code {
    private IConnectionInfoFeature? provider;
    private IAbortConnectionFeature? connManager;
    private IDisposable? subscription;
    private PaginationState pagination = new PaginationState() { ItemsPerPage = 20 };
    private CancellationTokenSource tokenSource = new CancellationTokenSource();
    private OOs.Threading.AsyncManualResetEvent updateEvt = new OOs.Threading.AsyncManualResetEvent();
    private IQueryable<ConnectionInfo>? connections;

    [UnconditionalSuppressMessage("Trimming", "IL2026:Members annotated with 'RequiresUnreferencedCodeAttribute' require dynamic access otherwise can break functionality when trimming application code", Justification = "<Pending>")]
    protected override void OnInitialized()
    {
        base.OnInitialized();
        provider = Server.GetFeature<IConnectionInfoFeature>();
        subscription = Server.GetFeature<IObservable<ConnectionStateChangedMessage>>()?.Subscribe(this);
        connManager = Server.GetFeature<IAbortConnectionFeature>();
        pagination.TotalItemCountChanged += (sender, args) => StateHasChanged();
        RunUpdateLoopAsync(tokenSource.Token, Options.Value.EventsThrottleInterval).Observe(e => Logger.LogError(e, e.Message));
        connections = provider?.GetConnections().AsQueryable();
    }

    public void Dispose()
    {
        using (subscription)
        using (tokenSource)
        {
            tokenSource.Cancel();
        }
    }

    void IObserver<ConnectionStateChangedMessage>.OnCompleted() { }

    void IObserver<ConnectionStateChangedMessage>.OnError(System.Exception error) { }

    void IObserver<ConnectionStateChangedMessage>.OnNext(ConnectionStateChangedMessage value)
    {
        updateEvt.Set();
    }

    private async Task RunUpdateLoopAsync(CancellationToken stoppingToken, TimeSpan delay)
    {
        var reloadAction = ForceReload;
        try
        {
            while (!stoppingToken.IsCancellationRequested)
            {
                await updateEvt.WaitAsync(stoppingToken).ConfigureAwait(false);
                updateEvt.Reset();
                await InvokeAsync(reloadAction).ConfigureAwait(false);
                await Task.Delay(delay, stoppingToken).ConfigureAwait(false);
            }
        }
        catch (OperationCanceledException)
        {
            // Expected
        }
    }

    [UnconditionalSuppressMessage("Trimming", "IL2026:Members annotated with 'RequiresUnreferencedCodeAttribute' require dynamic access otherwise can break functionality when trimming application code", Justification = "<Pending>")]
    private void ForceReload()
    {
        connections = provider?.GetConnections().AsQueryable();
        StateHasChanged();
    }
}