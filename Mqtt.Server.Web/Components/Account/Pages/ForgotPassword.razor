@page "/Account/ForgotPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Forgot your password?</PageTitle>

<h1>Forgot your password?</h1>
<h2>Enter your email.</h2>
<hr />
<div class="tw:row">
    <div class="tw:lg:w-[33%] tw:lg:flex-none">
        <EditForm EditContext="editContext" FormName="forgot-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="tw:text-danger" role="alert" />
            <div class="tw:form-floating tw:mb-4">
                <InputText @bind-Value="Input.Email" id="Input.Email" class="tw:form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="Input.Email" class="tw:form-label">Email</label>
                <ValidationMessage For="() => Input.Email" class="tw:text-danger" />
            </div>
            <button type="submit" class="tw:w-full tw:btn tw:btn-lg tw:btn-primary">Reset password</button>
        </EditForm>
    </div>
</div>

@code {
    private EditContext? editContext;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override Task OnInitializedAsync()
    {
        editContext = new(Input);
        editContext.SetFieldCssClassProvider(OmitValidStateFieldCssClassProvider.Instance);
        return Task.CompletedTask;
    }

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null || !(await UserManager.IsEmailConfirmedAsync(user)))
        {
            // Don't reveal that the user does not exist or is not confirmed
            RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
        }

        // For more information on how to enable account confirmation and password reset please
        // visit https://go.microsoft.com/fwlink/?LinkID=532713
        var code = await UserManager.GeneratePasswordResetTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
        NavigationManager.ToAbsoluteUri("Account/ResetPassword").AbsoluteUri,
        new Dictionary<string, object?> { ["code"] = code });

        await EmailSender.SendPasswordResetLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";
    }
}