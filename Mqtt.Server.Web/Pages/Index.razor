@page "/"
@using System.Numerics
@inject System.Net.Mqtt.Server.IMqttServer Server
@implements IDisposable

@if (connStats is null)
{
    <h6 class="text-body-secondary">Server doesn't provide connection statistics</h6>
    return;
}
else
{
    <h6>Connection statistics</h6>
}

<div class="grid-auto mb-3">
    <div class="border p-2 rounded-2 bg-light text-truncate">
        <h6>Total connections</h6>
        @FormatCount(connStats.GetTotalConnections())
    </div>
    <div class="border p-2 rounded-2 bg-light text-truncate">
        <h6>Active</h6>
        @FormatCount(connStats.GetActiveConnections())
    </div>
    <div class="border p-2 rounded-2 bg-light text-truncate">
        <h6>Rejected</h6>
        @FormatCount(connStats.GetRejectedConnections())
    </div>
</div>

@if (dataStats is null)
{
    <h6 class="text-body-secondary">Server doesn't provide data exchange statistics</h6>
    return;
}
else
{
    <h6>Data exchange statistics</h6>
}

<div class="grid-auto">
    <div class="border p-2 rounded-2 bg-light text-truncate">
        <h6>Bytes received</h6>
        @FormatSize(dataStats.GetBytesReceived())
    </div>
    <div class="border p-2 rounded-2 bg-light text-truncate">
        <h6>Bytes sent</h6>
        @FormatSize(dataStats.GetBytesSent())
    </div>
    <div class="border p-2 rounded-2 bg-light text-truncate">
        <h6>Packets received</h6>
        @FormatCount(dataStats.GetPacketsReceived())
    </div>
    <div class="border p-2 rounded-2 bg-light text-truncate">
        <h6>Packets sent</h6>
        @FormatCount(dataStats.GetPacketsSent())
    </div>
</div>

@code {
    private static string[] suffixes = { string.Empty, "KB", "MB", "TB" };
    private IProvideDataStatistics? dataStats;
    private IProvideConnectionStatistics? connStats;
    private PeriodicTimer periodicTimer = new PeriodicTimer(TimeSpan.FromSeconds(2));

    async Task StartRefreshTaskAsync()
    {
        while (await periodicTimer.WaitForNextTickAsync())
        {
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        dataStats = Server.GetFeature<IProvideDataStatistics>();
        connStats = Server.GetFeature<IProvideConnectionStatistics>();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            _ = StartRefreshTaskAsync();
        }
    }

    public void Dispose()
    {
        periodicTimer.Dispose();
    }

    private string FormatCount(long count)
    {
        return count.ToString("N0");
    }

    private string FormatSize(long bytes)
    {
        var p = Math.Min((int)(BitOperations.Log2((ulong)bytes) / 10), 3);
        if (p == 0) return bytes.ToString("N0");
        var n = bytes / Math.Pow(1024, p);
        return $"{n:N2} {suffixes[p]}";
    }
}