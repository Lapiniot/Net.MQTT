@page "/"
@using System.Numerics
@inject IMqttServer Server
@inject IOptions<UIOptions> Options
@inherits PeriodicRefreshComponent

<StandardCounters @ref="@countersRef" />

@if (connStats is null)
{
    <h6 class="text-body-secondary">Server doesn't provide connection statistics</h6>
}
else
{
    <h6>Connections</h6>
    <div class="grid-auto mb-4">
        @RenderCardC("Total", connStats.GetTotalConnections())
        @RenderCardC("Active", connStats.GetActiveConnections())
        @RenderCardC("Rejected", connStats.GetRejectedConnections())
    </div>
}

@if (sessionStats is null)
{
    <h6 class="text-body-secondary">Server doesn't provide session statistics</h6>
}
else
{
    <h6>Sessions</h6>
    <div class="grid-auto mb-4">
        @RenderCardC("Total", sessionStats.GetTotalSessions())
        @RenderCardC("Active", sessionStats.GetActiveSessions())
    </div>
}

@if (dataStats is null)
{
    <h6 class="text-body-secondary">Server doesn't provide data exchange statistics</h6>
}
else
{
    <h6>Data exchange</h6>
    <div class="grid-auto mb-4">
        @RenderCardS("Bytes received", dataStats.GetBytesReceived())
        @RenderCardS("Bytes sent", dataStats.GetBytesSent())
        @RenderCardC("Packets received", dataStats.GetPacketsReceived())
        @RenderCardC("Packets sent", dataStats.GetPacketsSent())
    </div>
}

@if (subsriptionStats is null)
{
    <h6 class="text-body-secondary">Server doesn't provide susbscription statistics</h6>
}
else
{
    <h6>Susbscriptions</h6>
    <div class="grid-auto">
        @RenderCardC("Active", subsriptionStats.GetActiveSubscriptionsCount())
    </div>
}

@code {
    private static string[] suffixes = { "", "KB", "MB", "GB", "TB" };
    private IDataStatisticsFeature? dataStats;
    private IConnectionStatisticsFeature? connStats;
    private ISubscriptionStatisticsFeature? subsriptionStats;
    private ISessionStatisticsFeature? sessionStats;
    private StandardCounters? countersRef;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        AutoRefreshInterval = (int)Math.Ceiling(Options.Value.AutoRefreshInterval.TotalSeconds);
        dataStats = Server.GetFeature<IDataStatisticsFeature>();
        connStats = Server.GetFeature<IConnectionStatisticsFeature>();
        subsriptionStats = Server.GetFeature<ISubscriptionStatisticsFeature>();
        sessionStats = Server.GetFeature<ISessionStatisticsFeature>();
    }

    protected override void OnRefreshTick()
    {
        base.OnRefreshTick();
        countersRef?.ForceRefresh();
    }

    private string FormatSize(long bytes)
    {
        var p = Math.Min((int)(BitOperations.Log2((ulong)bytes) / 10), 4);
        if (p == 0) return $"{bytes} B";
        var n = bytes / Math.Pow(1024, p);
        return $"{n:N2} {suffixes[p]}";
    }

    private RenderFragment RenderCardC(string header, long value) =>
    @<div class="border p-2 rounded-2 bg-light text-truncate">
        <h6>@header</h6>
        @(value.ToString("N0"))
    </div>;

    private RenderFragment RenderCardS(string header, long value) =>
    @<div class="border p-2 rounded-2 bg-light text-truncate">
        <h6>@header</h6>
        @FormatSize(value)
    </div>;
}