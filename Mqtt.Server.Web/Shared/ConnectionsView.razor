@inject System.Net.Mqtt.Server.IMqttServer Server

@if (provider is null)
{
    <h6 class="text-body-secondary">Server doesn't provide connections info.</h6>
    return;
}

<div class="d-inline-flex align-items-center mb-3">
    Items per page:
    <select class="form-select form-select-sm w-auto ms-2" @bind="@pagination.ItemsPerPage">
        <option>10</option>
        <option>20</option>
        <option>50</option>
        <option>100</option>
    </select>
</div>

<QuickGrid Items="@connections" Pagination="@pagination" Class="table table-striped table-bordered table-hover">
    <PropertyColumn Property="@(p=>p.ClientId)" Title="Client Id" />
    <PropertyColumn Property="@(p=>p.Id)" Title="Conn. Id" />
    <PropertyColumn Property="@(p=>p.Endpoint)" Title="Endpoint" />
</QuickGrid>

<div class="d-flex align-items-center">
    <span><strong>@(pagination.TotalItemCount ?? 0)</strong> active connections</span>
    @if (pagination.TotalItemCount.HasValue && pagination.LastPageIndex > 0)
    {
        <Mqtt.Server.Web.Shared.Paginator Pagination="@pagination" Class="ms-auto" />
    }
</div>

@code {
    private IProvideConnectionsInfo? provider;
    private IQueryable<ConnectionInfo>? connections;
    private PaginationState pagination = new PaginationState() { ItemsPerPage = 20 };

    protected override void OnInitialized()
    {
        base.OnInitialized();
        provider = Server.GetFeature<IProvideConnectionsInfo>();
        connections = provider?.GetConnections()?.AsQueryable();
        pagination.TotalItemCountChanged += (sender, args) => StateHasChanged();
    }
}