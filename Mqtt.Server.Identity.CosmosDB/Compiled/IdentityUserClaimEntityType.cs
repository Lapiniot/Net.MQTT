// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal;
using Microsoft.EntityFrameworkCore.Cosmos.ValueGeneration.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;
using Newtonsoft.Json.Linq;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Mqtt.Server.Identity.CosmosDB.Compiled
{
    [EntityFrameworkInternal]
    public partial class IdentityUserClaimEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Microsoft.AspNetCore.Identity.IdentityUserClaim<string>",
                typeof(IdentityUserClaim<string>),
                baseEntityType,
                propertyCount: 6,
                foreignKeyCount: 1,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(int),
                propertyInfo: typeof(IdentityUserClaim<string>).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentityUserClaim<string>).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);
            id.SetGetter(
                int (IdentityUserClaim<string> entity) => IdentityUserClaimUnsafeAccessors<string>.Id(entity),
                bool (IdentityUserClaim<string> entity) => IdentityUserClaimUnsafeAccessors<string>.Id(entity) == 0,
                int (IdentityUserClaim<string> instance) => IdentityUserClaimUnsafeAccessors<string>.Id(instance),
                bool (IdentityUserClaim<string> instance) => IdentityUserClaimUnsafeAccessors<string>.Id(instance) == 0);
            id.SetSetter(
                (IdentityUserClaim<string> entity, int value) => IdentityUserClaimUnsafeAccessors<string>.Id(entity) = value);
            id.SetMaterializationSetter(
                (IdentityUserClaim<string> entity, int value) => IdentityUserClaimUnsafeAccessors<string>.Id(entity) = value);
            id.SetAccessors(
                int (InternalEntityEntry entry) => IdentityUserClaimUnsafeAccessors<string>.Id(((IdentityUserClaim<string>)(entry.Entity))),
                int (InternalEntityEntry entry) => IdentityUserClaimUnsafeAccessors<string>.Id(((IdentityUserClaim<string>)(entry.Entity))),
                int (InternalEntityEntry entry) => entry.ReadOriginalValue<int>(id, 0),
                int (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<int>(id, 0),
                object (ValueBuffer valueBuffer) => valueBuffer[0]);
            id.SetPropertyIndexes(
                index: 0,
                originalValueIndex: 0,
                shadowIndex: -1,
                relationshipIndex: 0,
                storeGenerationIndex: -1);
            id.TypeMapping = CosmosTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                keyComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                clrType: typeof(int),
                jsonValueReaderWriter: JsonInt32ReaderWriter.Instance);
            id.SetCurrentValueComparer(new EntryCurrentValueComparer<int>(id));

            var claimType = runtimeEntityType.AddProperty(
                "ClaimType",
                typeof(string),
                propertyInfo: typeof(IdentityUserClaim<string>).GetProperty("ClaimType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentityUserClaim<string>).GetField("<ClaimType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            claimType.SetGetter(
                string (IdentityUserClaim<string> entity) => IdentityUserClaimUnsafeAccessors<string>.ClaimType(entity),
                bool (IdentityUserClaim<string> entity) => IdentityUserClaimUnsafeAccessors<string>.ClaimType(entity) == null,
                string (IdentityUserClaim<string> instance) => IdentityUserClaimUnsafeAccessors<string>.ClaimType(instance),
                bool (IdentityUserClaim<string> instance) => IdentityUserClaimUnsafeAccessors<string>.ClaimType(instance) == null);
            claimType.SetSetter(
                (IdentityUserClaim<string> entity, string value) => IdentityUserClaimUnsafeAccessors<string>.ClaimType(entity) = value);
            claimType.SetMaterializationSetter(
                (IdentityUserClaim<string> entity, string value) => IdentityUserClaimUnsafeAccessors<string>.ClaimType(entity) = value);
            claimType.SetAccessors(
                string (InternalEntityEntry entry) => IdentityUserClaimUnsafeAccessors<string>.ClaimType(((IdentityUserClaim<string>)(entry.Entity))),
                string (InternalEntityEntry entry) => IdentityUserClaimUnsafeAccessors<string>.ClaimType(((IdentityUserClaim<string>)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(claimType, 1),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(claimType),
                object (ValueBuffer valueBuffer) => valueBuffer[1]);
            claimType.SetPropertyIndexes(
                index: 1,
                originalValueIndex: 1,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            claimType.TypeMapping = CosmosTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                keyComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                clrType: typeof(string),
                jsonValueReaderWriter: JsonStringReaderWriter.Instance);

            var claimValue = runtimeEntityType.AddProperty(
                "ClaimValue",
                typeof(string),
                propertyInfo: typeof(IdentityUserClaim<string>).GetProperty("ClaimValue", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentityUserClaim<string>).GetField("<ClaimValue>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            claimValue.SetGetter(
                string (IdentityUserClaim<string> entity) => IdentityUserClaimUnsafeAccessors<string>.ClaimValue(entity),
                bool (IdentityUserClaim<string> entity) => IdentityUserClaimUnsafeAccessors<string>.ClaimValue(entity) == null,
                string (IdentityUserClaim<string> instance) => IdentityUserClaimUnsafeAccessors<string>.ClaimValue(instance),
                bool (IdentityUserClaim<string> instance) => IdentityUserClaimUnsafeAccessors<string>.ClaimValue(instance) == null);
            claimValue.SetSetter(
                (IdentityUserClaim<string> entity, string value) => IdentityUserClaimUnsafeAccessors<string>.ClaimValue(entity) = value);
            claimValue.SetMaterializationSetter(
                (IdentityUserClaim<string> entity, string value) => IdentityUserClaimUnsafeAccessors<string>.ClaimValue(entity) = value);
            claimValue.SetAccessors(
                string (InternalEntityEntry entry) => IdentityUserClaimUnsafeAccessors<string>.ClaimValue(((IdentityUserClaim<string>)(entry.Entity))),
                string (InternalEntityEntry entry) => IdentityUserClaimUnsafeAccessors<string>.ClaimValue(((IdentityUserClaim<string>)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(claimValue, 2),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(claimValue),
                object (ValueBuffer valueBuffer) => valueBuffer[2]);
            claimValue.SetPropertyIndexes(
                index: 2,
                originalValueIndex: 2,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            claimValue.TypeMapping = CosmosTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                keyComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                clrType: typeof(string),
                jsonValueReaderWriter: JsonStringReaderWriter.Instance);

            var userId = runtimeEntityType.AddProperty(
                "UserId",
                typeof(string),
                propertyInfo: typeof(IdentityUserClaim<string>).GetProperty("UserId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentityUserClaim<string>).GetField("<UserId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            userId.SetGetter(
                string (IdentityUserClaim<string> entity) => IdentityUserClaimUnsafeAccessors<string>.UserId(entity),
                bool (IdentityUserClaim<string> entity) => IdentityUserClaimUnsafeAccessors<string>.UserId(entity) == null,
                string (IdentityUserClaim<string> instance) => IdentityUserClaimUnsafeAccessors<string>.UserId(instance),
                bool (IdentityUserClaim<string> instance) => IdentityUserClaimUnsafeAccessors<string>.UserId(instance) == null);
            userId.SetSetter(
                (IdentityUserClaim<string> entity, string value) => IdentityUserClaimUnsafeAccessors<string>.UserId(entity) = value);
            userId.SetMaterializationSetter(
                (IdentityUserClaim<string> entity, string value) => IdentityUserClaimUnsafeAccessors<string>.UserId(entity) = value);
            userId.SetAccessors(
                string (InternalEntityEntry entry) => (entry.FlaggedAsStoreGenerated(3) ? entry.ReadStoreGeneratedValue<string>(0) : (entry.FlaggedAsTemporary(3) && IdentityUserClaimUnsafeAccessors<string>.UserId(((IdentityUserClaim<string>)(entry.Entity))) == null ? entry.ReadTemporaryValue<string>(0) : IdentityUserClaimUnsafeAccessors<string>.UserId(((IdentityUserClaim<string>)(entry.Entity))))),
                string (InternalEntityEntry entry) => IdentityUserClaimUnsafeAccessors<string>.UserId(((IdentityUserClaim<string>)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(userId, 3),
                string (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<string>(userId, 1),
                object (ValueBuffer valueBuffer) => valueBuffer[3]);
            userId.SetPropertyIndexes(
                index: 3,
                originalValueIndex: 3,
                shadowIndex: -1,
                relationshipIndex: 1,
                storeGenerationIndex: 0);
            userId.TypeMapping = CosmosTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                keyComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                clrType: typeof(string),
                jsonValueReaderWriter: JsonStringReaderWriter.Instance);
            userId.SetCurrentValueComparer(new EntryCurrentValueComparer<string>(userId));

            var __id = runtimeEntityType.AddProperty(
                "__id",
                typeof(string),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                valueGeneratorFactory: new IdValueGeneratorFactory().Create);
            __id.SetAccessors(
                string (InternalEntityEntry entry) => entry.ReadShadowValue<string>(0),
                string (InternalEntityEntry entry) => entry.ReadShadowValue<string>(0),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(__id, 4),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(__id),
                object (ValueBuffer valueBuffer) => valueBuffer[4]);
            __id.SetPropertyIndexes(
                index: 4,
                originalValueIndex: 4,
                shadowIndex: 0,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            __id.TypeMapping = CosmosTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                keyComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                clrType: typeof(string),
                jsonValueReaderWriter: JsonStringReaderWriter.Instance);
            __id.AddAnnotation("Cosmos:PropertyName", "id");

            var __jObject = runtimeEntityType.AddProperty(
                "__jObject",
                typeof(JObject),
                nullable: true,
                valueGenerated: ValueGenerated.OnAddOrUpdate,
                beforeSaveBehavior: PropertySaveBehavior.Ignore,
                afterSaveBehavior: PropertySaveBehavior.Ignore);
            __jObject.SetAccessors(
                JObject (InternalEntityEntry entry) => (entry.FlaggedAsStoreGenerated(5) ? entry.ReadStoreGeneratedValue<JObject>(1) : (entry.FlaggedAsTemporary(5) && entry.ReadShadowValue<JObject>(1) == null ? entry.ReadTemporaryValue<JObject>(1) : entry.ReadShadowValue<JObject>(1))),
                JObject (InternalEntityEntry entry) => entry.ReadShadowValue<JObject>(1),
                JObject (InternalEntityEntry entry) => entry.ReadOriginalValue<JObject>(__jObject, 5),
                JObject (InternalEntityEntry entry) => entry.GetCurrentValue<JObject>(__jObject),
                object (ValueBuffer valueBuffer) => valueBuffer[5]);
            __jObject.SetPropertyIndexes(
                index: 5,
                originalValueIndex: 5,
                shadowIndex: 1,
                relationshipIndex: -1,
                storeGenerationIndex: 1);
            __jObject.TypeMapping = CosmosTypeMapping.Default.Clone(
                comparer: new ValueComparer<JObject>(
                    bool (JObject v1, JObject v2) => object.Equals(v1, v2),
                    int (JObject v) => ((object)v).GetHashCode(),
                    JObject (JObject v) => v),
                keyComparer: new ValueComparer<JObject>(
                    bool (JObject v1, JObject v2) => object.Equals(v1, v2),
                    int (JObject v) => ((object)v).GetHashCode(),
                    JObject (JObject v) => v),
                providerValueComparer: new ValueComparer<JObject>(
                    bool (JObject v1, JObject v2) => object.Equals(v1, v2),
                    int (JObject v) => ((object)v).GetHashCode(),
                    JObject (JObject v) => v),
                clrType: typeof(JObject));
            __jObject.AddAnnotation("Cosmos:PropertyName", "");

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("UserId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            var id = runtimeEntityType.FindProperty("Id");
            var claimType = runtimeEntityType.FindProperty("ClaimType");
            var claimValue = runtimeEntityType.FindProperty("ClaimValue");
            var userId = runtimeEntityType.FindProperty("UserId");
            var __id = runtimeEntityType.FindProperty("__id");
            var __jObject = runtimeEntityType.FindProperty("__jObject");
            var key = runtimeEntityType.FindKey(new[] { id });
            key.SetPrincipalKeyValueFactory(KeyValueFactoryFactory.CreateSimpleNonNullableFactory<int>(key));
            key.SetIdentityMapFactory(IdentityMapFactoryFactory.CreateFactory<int>(key));
            runtimeEntityType.SetOriginalValuesFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((IdentityUserClaim<string>)(source.Entity));
                    return ((ISnapshot)(new Snapshot<int, string, string, string, string, JObject>(((ValueComparer<int>)(((IProperty)id).GetValueComparer())).Snapshot(source.GetCurrentValue<int>(id)), (source.GetCurrentValue<string>(claimType) == null ? null : ((ValueComparer<string>)(((IProperty)claimType).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(claimType))), (source.GetCurrentValue<string>(claimValue) == null ? null : ((ValueComparer<string>)(((IProperty)claimValue).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(claimValue))), (source.GetCurrentValue<string>(userId) == null ? null : ((ValueComparer<string>)(((IProperty)userId).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(userId))), (source.GetCurrentValue<string>(__id) == null ? null : ((ValueComparer<string>)(((IProperty)__id).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(__id))), (source.GetCurrentValue<JObject>(__jObject) == null ? null : ((ValueComparer<JObject>)(((IProperty)__jObject).GetValueComparer())).Snapshot(source.GetCurrentValue<JObject>(__jObject))))));
                });
            runtimeEntityType.SetStoreGeneratedValuesFactory(
                ISnapshot () => ((ISnapshot)(new Snapshot<string, JObject>((default(string) == null ? null : ((ValueComparer<string>)(((IProperty)userId).GetValueComparer())).Snapshot(default(string))), (default(JObject) == null ? null : ((ValueComparer<JObject>)(((IProperty)__jObject).GetValueComparer())).Snapshot(default(JObject)))))));
            runtimeEntityType.SetTemporaryValuesFactory(
                ISnapshot (InternalEntityEntry source) => ((ISnapshot)(new Snapshot<string, JObject>(default(string), default(JObject)))));
            runtimeEntityType.SetShadowValuesFactory(
                ISnapshot (IDictionary<string, object> source) => ((ISnapshot)(new Snapshot<string, JObject>((source.ContainsKey("__id") ? ((string)(source["__id"])) : null), (source.ContainsKey("__jObject") ? ((JObject)(source["__jObject"])) : null)))));
            runtimeEntityType.SetEmptyShadowValuesFactory(
                ISnapshot () => ((ISnapshot)(new Snapshot<string, JObject>(default(string), default(JObject)))));
            runtimeEntityType.SetRelationshipSnapshotFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((IdentityUserClaim<string>)(source.Entity));
                    return ((ISnapshot)(new Snapshot<int, string>(((ValueComparer<int>)(((IProperty)id).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<int>(id)), (source.GetCurrentValue<string>(userId) == null ? null : ((ValueComparer<string>)(((IProperty)userId).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<string>(userId))))));
                });
            runtimeEntityType.Counts = new PropertyCounts(
                propertyCount: 6,
                navigationCount: 0,
                complexPropertyCount: 0,
                originalValueCount: 6,
                shadowCount: 2,
                relationshipCount: 2,
                storeGeneratedCount: 2);
            runtimeEntityType.AddAnnotation("Cosmos:ContainerName", "Identity_UserClaims");
            runtimeEntityType.AddAnnotation("Cosmos:PartitionKeyNames", new List<string> { "UserId" });
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "AspNetUserClaims");

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}